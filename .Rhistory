labs(x = "Predictions",y = "Reference")
train.data_parasite %>%
group_by(Parasite_challenge) %>%
summarize(length(Parasite_challenge))
# to use in the next model
parasite_data <- parasite_data %>%
dplyr::select(-Parasite_challenge)
# split data into training and test
set.seed(123) # this will help us reproduce this random assignment
# in this way we can pick the random numbers
training.samples_melting <- parasite_data$Eim_MC%>%
createDataPartition(p = .7, # this is the partiicition! In this case 0.7 = training data and 0.3 = testing
list = FALSE) # we don't want to get a list in return
train.data_melting <- parasite_data[training.samples, ] #include all the randomly selected rows
test.data_melting <- parasite_data[-training.samples, ]
#train the model
model_melting <- randomForest(Eim_MC ~., data = train.data_melting, proximity = TRUE,
ntree = 1500) # number of trees
print(model_melting)
#The predict() function in R is used to predict the values based on the input data.
predictions_melting <- predict(model_melting, test.data_melting)
# assign test.data to a new object, so that we can make changes
result_melting <- test.data_melting
#add the new variable of predictions to the result object
result_melting <- cbind(result_melting, predictions_melting)
#add the results to a data frame containing test data and the prediction
result_melting <- cbind(g[row.names(result_melting), ], predictions_melting)
conf_matrix_melting <- confusionMatrix(result_melting$predictions_melting, reference = result_melting$Eim_MC)
print(conf_matrix_melting)
conf_matrix_melting$table
plt <- as.data.frame(conf_matrix_melting$table)
plt$Prediction <- factor(plt$Prediction, levels=rev(levels(plt$Prediction)))
ggplot(plt, aes(x = Prediction, y =  Reference, fill= Freq)) +
geom_tile() + geom_text(aes(label=Freq)) +
scale_fill_gradient(low="white", high="forestgreen") +
labs(x = "Predictions",y = "Reference")
Field <- read.csv("https://raw.githubusercontent.com/derele/Mouse_Eimeria_Field/master/data_products/SOTA_Data_Product.csv")
Field %>% summarise(length(Mouse_ID))
EqPCR.cols      <- c("delta_ct_cewe_MminusE", "MC.Eimeria", "Ct.Eimeria") #,"Ct.Mus""delta_ct_ilwe_MminusE", )
EimGeno.cols    <- c("n18S_Seq", "COI_Seq", "ORF470_Seq", "eimeriaSpecies")
Gene.Exp.cols   <- c("IFNy",  "CXCR3", "IL.6", #"GBP2", "IL.12", "IRG6",
"IL.10", "IL.13", "IL.10", "IL.13", "IL1RN",
"CXCR3", "CASP1", "CXCL9",
"IDO1", "IRGM1", "MPO", "MUC2", "MUC5AC", "MYD88",
"NCR1", "PRF1", "RETNLB", "SOCS1", "TICAM1", "TNF")
House.Keeping.cols <- c("GAPDH", "PPIB", "B.actin", "B-actin")
#which are the numbers of the columns of Field
names <- data.frame(colnames(Field))
f <- Field[ , c(76:78, 80:97)]
#how many nas in each column
sapply(f, function(x) sum(is.na(x)))
#remove rows with only nas
f <- f[rowSums(is.na(f)) != ncol(f), ]
Field <- Field %>%
dplyr::select(-c(76:78, 80:97))
#merge the data frame to keep only the selected rows
f <- merge(Field, f, by = "row.names")
library(mice)
f <- f %>% dplyr::select(-"Row.names")
#turn the eimeria species into logical
f$eimeriaSpecies <- as.factor(f$eimeriaSpecies)
field_genes <- f %>%
dplyr::select(Gene.Exp.cols)
# check the data for missing values
sapply(field_genes, function(x) sum(is.na(x)))
field_genes %>%
aggr(col = c('navyblue', 'red'), numbers = TRUE, sortVars = TRUE, labels=names(field_genes), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
marginplot(field_genes[c(1,2)])
# The frequency distribution of the missing cases per variable can be obtained as:
init <- mice(field_genes, maxit = 0)
# table of amount of variables with the amount of missing values
table(init$nmis)
# which method is used for imputation? In this case the package mice
# uses the default method for continuous variable,
# which is pmm, or predictive mean matching
meth <- init$method
# now impute the immune gene expression for the field and save it as the oject:
# igf
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(field_genes, method = meth, m = 5, seed = 500)
summary(igf)
# to check each column with imputed data
## igf$imp$IFNy
#Now we can get back the completed dataset using the complete()
completeField <- complete(igf, 1)
xyplot(igf,IFNy ~ SOCS1 + IRGM1 + MUC2, pch=18,cex=1)
xyplot(igf,IFNy ~ IL.10 + PRF1 + CASP1, pch=18,cex=1)
densityplot(igf)
stripplot(igf, pch = 20, cex = 1.2)
# Start by selecting the columns that appear in both the training data set and the
# field data set
completeField <- completeField %>%
dplyr::select(intersect(colnames(completeField), colnames(train.data)))
set.seed(540)
#The predict() function in R is used to predict the values based on the input data.
predictions_field <- predict(model, completeField)
# assign test.data to a new object, so that we can make changes
result_field <- completeField
#add the new variable of predictions to the result object
result_field <- cbind(result_field, predictions_field)
#add the results to a data frame containing test data and the prediction
f <- f %>%
dplyr::select(-intersect(colnames(result_field), colnames(f)))
result_field <- cbind(f, result_field)
require(devtools)
devtools::install_github("alicebalard/parasiteLoad@v2.0")
#force = TRUE)
library(parasiteLoad)
result_field %>% ggplot(aes(x = predictions_field)) +
geom_histogram(binwidth = 1.5)
result_field %>%
ggplot(aes(x = HI , y = predictions_field , color = Sex)) +
geom_smooth() +
geom_point()
result_field %>%
ggplot(aes(x = Body_Length , y = predictions_field , color = Sex)) +
geom_smooth() +
geom_point()
library(fitdistrplus)
library(logspline)
result_field <- result_field %>%
dplyr::mutate(WL = predictions_field * (-1))
x <- result_field$WL
descdist(data = x, discrete = FALSE)
descdist(data = x, discrete = FALSE, #data is continuous
boot = 1000)
set.seed(10)
n = 25
size = 27
prob = .4
data = rbinom(x, size = size, prob = prob)
fit = fitdist(data = data, dist="binom",
fix.arg=list(size = size),
start=list(prob = 0.1))
summary(fit)
plot(fit)
normal_ <- fitdist(x, "norm")
weibull_ <- fitdist(x, "weibull")
gamma_ <- fitdist(x, "gamma")
library(fitdistrplus) # evaluate distribution
# Define function to be used to test, get the log lik and aic
tryDistrib <- function(x, distrib){
# deals with fitdistr error:
fit <- tryCatch(MASS::fitdistr(x, distrib), error=function(err) "fit failed")
return(list(fit = fit,
loglik = tryCatch(fit$loglik, error=function(err) "no loglik computed"),
AIC = tryCatch(fit$aic, error=function(err) "no aic computed")))
}
findGoodDist <- function(x, distribs, distribs2){
l =lapply(distribs, function(i) tryDistrib(x, i))
names(l) <- distribs
print(l)
listDistr <- lapply(distribs2, function(i){
if (i %in% "t"){
fitdistrplus::fitdist(x, i, start = list(df =2))
} else {
fitdistrplus::fitdist(x,i)
}}
)
par(mfrow=c(2,2))
denscomp(listDistr, legendtext=distribs2)
cdfcomp(listDistr, legendtext=distribs2)
qqcomp(listDistr, legendtext=distribs2)
ppcomp(listDistr, legendtext=distribs2)
par(mfrow=c(1,1))
}
tryDistrib(x, "normal")
tryDistrib(x, "binomial")
tryDistrib(x, "student")
tryDistrib(x, "weibull")
tryDistrib(x, "weibullshifted")
findGoodDist(x, "normal", "weibull")
plot(normal_)
summary(normal_)
plot(gamma_)
summary(gamma_)
plot(weibull_)
summary(weibull_)
result_field$Sex <- as.factor(result_field$Sex)
result_field <- result_field %>%
drop_na(HI)
parasiteLoad::getParamBounds("weibull", data = result_field, response = "WL")
speparam <- c(L1start = 10,
L1LB = 1e-9,
L1UB = 20,
L2start = 10,
L2LB = 1e-9,
L2UB = 20,
alphaStart = 0, alphaLB = -5, alphaUB = 5,
myshapeStart = 1, myshapeLB = 1e-9, myshapeUB = 5)
##All
parasiteLoad::analyse(data = result_field,
response = "WL",
model = "weibull",
group = "Sex")
result_field %>%
dplyr::group_by(MC.Eimeria) %>%
summarize(length(Mouse_ID))
result_field %>%
dplyr::group_by(eimeriaSpecies) %>%
summarize(length(Mouse_ID))
result_field_mc <- result_field %>%
drop_na("MC.Eimeria")
glimpse(result_field_mc)
parasiteLoad::getParamBounds("weibull", data = result_field_mc, response = "WL")
speparam <- c(L1start = 10,
L1LB = 1e-9,
L1UB = 20,
L2start = 10,
L2LB = 1e-9,
L2UB = 20,
alphaStart = 0, alphaLB = -5, alphaUB = 5,
myshapeStart = 1, myshapeLB = 1e-9, myshapeUB = 5)
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "MC.Eimeria")
result_field_mc$MC.Eimeria
str(result_field_mc$MC.Eimeria)
levels(result_field_mc$MC.Eimeria)
(data = result_field_mc,
##All
parasiteLoad::analyse(data = result_field,
response = "WL",
model = "weibull",
group = "MC_eimeria")
##All
parasiteLoad::analyse(data = result_field,
response = "WL",
model = "weibull",
group = "Sex")
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "MC.Eimeria")
result_field_mc <- %>% result_field_mc %>%
result_field_mc <- result_field_mc %>%
mutate(Eim_MC = MC.Eimeria)
glimpse(result_field_mc)
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Eim_MC")
parasiteLoad::getParamBounds("weibull", data = result_field_mc, response = "WL")
speparam <- c(L1start = 10,
L1LB = 1e-9,
L1UB = 20,
L2start = 10,
L2LB = 1e-9,
L2UB = 20,
alphaStart = 0, alphaLB = -5, alphaUB = 5,
myshapeStart = 1, myshapeLB = 1e-9, myshapeUB = 5)
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Eim_MC")
##All
parasiteLoad::analyse(data = result_field,
response = "WL",
model = "weibull",
group = "Sex")
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Eim_MC")
str(result_field_mc$MC.Eimeria)
class(result_field_mc$MC.Eimeria)
typeof(result_field_mc$MC.Eimeria)
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "MC.Eimeria")
result_field_mc <- result_field_mc %>%
dplyr::mutate(Eimeria = case_when(
MC.Eimeria == "TRUE" ~ "Positive",
MC.Eimeria == "FALSE" ~ "Negative",
TRUE ~ ""
))
class(result_field_mc$Eimeria)
str(result_field_mc$Eimeria)
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Eimeria")
as.factor(result_field_mc$Eimeria)
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Eimeria")
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Eimeria")
View(result_field_mc)
sapply(result_field_mc, function (x) {is.na()})
sapply(result_field_mc, function (x) {is.na(X)})
sapply(result_field_mc, function (x) {is.na(X)})
sapply(result_field_mc, function (x) {is.na(X)})
sapply(result_field_mc, function (x) {sum(is.na(X))})
sapply(result_field_mc, function (x) sum(is.na(X)))
sapply(result_field_mc, function (x) sum(is.na(X)))
sapply(result_field_mc, function (x) sum(is.na(x)))
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Eimeria")
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "MC_eimeria")
result_field_mc <- result_field_mc %>%
dplyr::mutate(Eimeria = case_when(
MC.Eimeria == "TRUE" ~ "1",
MC.Eimeria == "FALSE" ~ "0",
TRUE ~ ""
))
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Eimeria")
str(result_field_mc$MC.Eimeria)
str(result_field_mc$MC.Eimeria)
str(result_field_mc$Eimeria)
result_field_mc <- result_field_mc %>%
dplyr::mutate(Eimeria = case_when(
MC.Eimeria == "TRUE" ~ "positive",
MC.Eimeria == "FALSE" ~ "negative",
TRUE ~ ""
))
unique(result_field_mc$Eimeria)
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Eimeria")
is.na(result_field_mc$HI_NLoci)
is.na(result_field_mc$HI)
sum(is.na(result_field_mc$HI))
as.factor(result_field_mc$Eimeria)
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Eimeria")
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Eimeria")
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Sex")
str(result_field_mc$MC.Eimeria)
str(result_field_mc$Sex)
as.factor(result_field_mc$Eimeria)
as.factor(result_field_mc$MC.Eimeria)
str(result_field_mc$Sex)
str(result_field_mc$MC.Eimeria)
result_field_mc <- result_field_mc %>%
dplyr::mutate(Eimeria = case_when(
MC.Eimeria == "TRUE" ~ "positive",
MC.Eimeria == "FALSE" ~ "negative",
TRUE ~ ""
))
str(result_field_mc$Eimeria)
as.factor(result_field_mc$Eimeria)
as.factor(result_field_mc$Eimeria)
str(result_field_mc$Sex)
str(result_field_mc$Eimeria)
as.factor(result_field_mc$MC.Eimeria)
as.factor(result_field_mc$Eimeria)
str(result_field_mc$Eimeria)
levels(result_field_mc$Eimeria)
class(result_field_mc$Eimeria)
result_field_mc$Eimeria <- as.factor(result_field_mc$Eimeria)
class(result_field_mc$Eimeria)
levels(result_field_mc$Eimeria)
##All
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Sex")
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Sex")
##All
fitWL_Sex <- parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Sex")
##All
fitWL_Sex <- parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Sex")
bananaP
##All
fitWL_Sex <- parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Eimeria")
fitWL_Eimeria
##All
fitWL_Eimeria <- parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Eimeria")
##All
fitWL_Eimeria <- parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Eimeria")
fitWL_Eimeria
parasiteLoad::analyse(data = result_field_mc,
response = "WL",
model = "weibull",
group = "Eimeria")
plot_WL_Eimeria <- bananaPlot(mod = fitWL_Eimeria$H0,
data = body_data_pinworms,
response = "WL",
group = "Eimeria") +
scale_fill_manual(values = c("grey", "green")) +
scale_color_manual(values = c("grey", "green")) +
theme_bw()
plot_WL_Eimeria <- bananaPlot(mod = fitWL_Eimeria$H0,
data = result_field_mc,
response = "WL",
group = "Eimeria") +
scale_fill_manual(values = c("grey", "green")) +
scale_color_manual(values = c("grey", "green")) +
theme_bw()
plot_WL_Eimeria <- bananaPlot(mod = fitWL_Eimeria$H0,
data = result_field_mc,
response = "WL",
group = "Eimeria") +
scale_fill_manual(values = c("grey", "green")) +
scale_color_manual(values = c("grey", "green")) +
theme_bw()
plot_WL_Eimeria
##All
fitWL_Sex <- parasiteLoad::analyse(data = result_field,
response = "WL",
model = "weibull",
group = "Sex")
parasiteLoad::analyse(data = result_field,
response = "WL",
model = "weibull",
group = "Sex")
plot_WL_Sex<- bananaPlot(mod = result_field$H3,
data = result_field_mc,
response = "WL",
group = "Sex") +
scale_fill_manual(values = c("grey", "green")) +
scale_color_manual(values = c("grey", "green")) +
theme_bw()
plot_WL_Sex<- bananaPlot(mod = result_field$H3,
data = result_field_mc,
response = "WL",
group = "Sex") +
scale_fill_manual(values = c("grey", "green")) +
scale_color_manual(values = c("grey", "green")) +
theme_bw()
plot_WL_Sex<- bananaPlot(mod = result_field$H3,
data = result_field,
response = "WL",
group = "Sex") +
scale_fill_manual(values = c("grey", "green")) +
scale_color_manual(values = c("grey", "green")) +
theme_bw()
fitWL_Sex
plot_WL_Sex<- bananaPlot(mod = result_field$H3,
data = result_field,
response = "WL",
group = "Sex") +
scale_fill_manual(values = c("grey", "green")) +
scale_color_manual(values = c("grey", "green")) +
theme_bw()
plot_WL_Sex<- bananaPlot(mod = result_field$H3,
data = result_field,
response = "WL",
group = "Sex") +
scale_fill_manual(values = c("grey", "green")) +
scale_color_manual(values = c("grey", "green")) +
theme_bw()
plot_WL_Sex<- bananaPlot(mod = fitWL_Sex$H3,
data = result_field,
response = "WL",
group = "Sex") +
scale_fill_manual(values = c("grey", "green")) +
scale_color_manual(values = c("grey", "green")) +
theme_bw()
plot_WL_Eimeria
plot_WL_Sex
knitr::opts_chunk$set(echo = TRUE)
library(lmtest)
warnigns()
warnings()
