knitr::opts_chunk$set(echo = TRUE)
library(pheatmap)
library(tidyverse)
library(tidyr)
library(dplyr)
library(janitor)
library(visdat)
Challenge <- read.csv("input_data/Challenge_infections.csv")
setwd("~/GitHub/Eimeria_mouse_immunity/")
knitr::opts_chunk$set(echo = TRUE)
library(pheatmap)
library(tidyverse)
library(tidyr)
library(dplyr)
library(janitor)
library(visdat)
Challenge <- read.csv("input_data/Challenge_infections.csv")
SOTA <- read.csv("input_data/SOTA_Data_Product.csv")
# Vectors for selecting genes
#Lab genes
# The measurements of IL.12 and IRG6 are done with an other assay and will
#ignore for now
Gene_lab   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
Genes_wild   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #, "IL.12", "IRG6")
Facs_lab <- c("Position", "CD4", "Treg", "Div_Treg", "Treg17", "Th1",
"Div_Th1", "Th17", "Div_Th17", "CD8", "Act_CD8",
"Div_Act_CD8", "IFNy_CD4", "IFNy_CD8","Treg_prop",
"IL17A_CD4")
Facs_wild <- c( "Treg", "CD4", "Treg17", "Th1", "Th17", "CD8",
"Act_CD8", "IFNy_CD4", "IL17A_CD4", "IFNy_CD8")
Challenge <- Challenge %>%
dplyr::mutate(Parasite_primary = case_when(
primary_infection == "E64" ~ "E_ferrisi",
primary_infection == "E88" ~ "E_falciformis",
primary_infection == "Eflab" ~ "E_falciformis",
primary_infection == "E139" ~ "E_ferrisi",
primary_infection == "UNI" ~ "uninfected",
TRUE ~ ""))
Challenge <- Challenge %>%
dplyr::mutate(Parasite_challenge = case_when(
challenge_infection == "E64" ~ "E_ferrisi",
challenge_infection == "E88" ~ "E_falciformis",
challenge_infection == "Eflab" ~ "E_falciformis",
challenge_infection == "E139" ~ "E_ferrisi",
challenge_infection == "UNI" ~ "uninfected",
TRUE ~ ""))
Challenge <- Challenge %>%
dplyr::mutate(infection_history = case_when(
Parasite_primary == "uninfected" &
Parasite_challenge == "uninfected" ~ "uninfected",
Parasite_primary == "uninfected" &
Parasite_challenge == "E_ferrisi" ~ "uninfected_ferrisi",
Parasite_primary == "uninfected" &
Parasite_challenge == "E_falciformis" ~ "uninfected_falciformis",
Parasite_primary == "E_falciformis" &
Parasite_challenge == "E_falciformis" ~ "falciformis_falciformis",
Parasite_primary == "E_falciformis" &
Parasite_challenge == "E_ferrisi" ~ "falciformis_ferrisi",
Parasite_primary == "E_falciformis" &
Parasite_challenge == "uninfected" ~ "falciformis_uninfected",
Parasite_primary == "E_ferrisi" &
Parasite_challenge == "E_falciformis" ~ "ferrisi_falciformis",
Parasite_primary == "E_ferrisi" &
Parasite_challenge == "E_ferrisi" ~ "ferrisi_ferrisi",
Parasite_primary == "E_ferrisi" &
Parasite_challenge == "uninfected" ~ "ferrisi_uninfected",
TRUE ~ ""))
### Add the variable end weight (relative weight at day of sacrifice)
# start by adding the variable dpi_max which inficates the last day of each mouse
Challenge <- Challenge %>%
dplyr::filter(!weight == "NA") %>%
dplyr::group_by(EH_ID, infection) %>%
dplyr::mutate(dpi_max = max(dpi), WL_max = (min(relative_weight) - 100))
#somehow case when dplyr ways didn't work for me and this is the only solution
#that is functional
#let's filter for the challenge mice
chal <- Challenge %>% filter(infection == "challenge")
#now only select the rows where the dpi is equal to the dpi max for each mouse
chal <- chal[chal$dpi == chal$dpi_max, ]
#now we can easily add the variable end weight to each mouse (which in now equal
#to the weight on the dpi = dpi_max)
chal <- chal %>% dplyr::mutate(end_rel_weight = (weight/weight_dpi0) * 100)
#let'repeat for the prim
#let's filter for the challenge mice
prim <- Challenge %>% filter(infection == "primary")
#now only select the rows where the dpi is equal to the dpi max for each mouse
prim <- prim[prim$dpi == prim$dpi_max, ]
#now we can easily add the variable end weight to each mouse (which in now equal
#to the weight on the dpi = dpi_max)
prim <- prim %>%
dplyr::mutate(end_rel_weight = (weight/weight_dpi0) * 100)
c <- rbind(chal, prim)
#now jon it to the challenge infections
c %>%
dplyr::select(EH_ID, end_rel_weight) %>%
right_join(Challenge) -> Challenge
Challenge <- unique(Challenge)
#There are two measuremts for CXCR3
# We want to here keep the CXCR3_bio
Challenge <- Challenge %>%
dplyr::select(-CXCR3)
#Now rename the CXCR3_bio to CXCR3
Challenge <- Challenge %>%
dplyr::rename(CXCR3 = CXCR3_bio)
rm(c, chal, prim)
length(intersect(colnames(Challenge), colnames(SOTA)))
#37 intersecting columns
# create a function that is the opposite of intersect
outersect <- function(x, y) {
sort(c(setdiff(x, y),
setdiff(y, x)))
}
length(outersect(colnames(Challenge), colnames(SOTA)))
# 149 dissimilar columns
# add a column that indicates where the samples are from
Challenge <- Challenge %>%
dplyr::mutate(origin = "Lab")
SOTA <- SOTA %>%
dplyr::mutate(origin = "Field")
# Adjust the parasite names to fit the lab
SOTA <- SOTA %>%
dplyr::mutate(eimeriaSpecies = case_when(
eimeriaSpecies == "Negative" ~ "uninfected",
eimeriaSpecies == "" ~ "NA",
TRUE ~ eimeriaSpecies))
# Rename column names to match each other
Challenge <- Challenge %>%
dplyr::rename(Mouse_ID = EH_ID, delta_ct_cewe_MminusE = delta,
MC.Eimeria = Eim_MC, Feces_Weight = feces_weight)
#expected columns:
37 + 149 #186
# now join the two data sets
data <- full_join(Challenge, SOTA,
by = intersect(colnames(SOTA), colnames(Challenge)))
write.csv(data, "output_data/1.MICE_cleaned_data.csv", row.names = FALSE)
gene <- as_tibble(data) %>%
dplyr::filter(origin == "Lab", infection == "challenge", dpi == dpi_max) %>%
dplyr::group_by(Mouse_ID) %>%
dplyr::select(c(Mouse_ID, MC.Eimeria, all_of(Gene_lab)))
gene <- unique(gene)
# turn the data frame into a matrix and transpose it. We want to have each cell
# type as a row name
gene <- t(as.matrix(gene %>%
dplyr::select(c(Mouse_ID, all_of(Gene_lab)))))
#switch the matrix back to a data frame format
gene <- as.data.frame(gene)
# turn the first row into column names
gene %>%
row_to_names(row_number = 1) -> heatmap_data
table(rowSums(is.na(heatmap_data)) == nrow(heatmap_data))
# turn the columns to numeric other wise the heatmap function will not work
heatmap_data[] <- lapply(heatmap_data, function(x) as.numeric(as.character(x)))
# remove columns with only NAs
heatmap_data <- Filter(function(x)!all(is.na(x)), heatmap_data)
#remove rows with only Nas
heatmap_data <-  heatmap_data[, colSums(is.na(heatmap_data)) !=
nrow(heatmap_data)]
#Prepare the annotation data frame
annotation_df <- as_tibble(data) %>%
dplyr::filter(origin == "Lab", infection == "challenge", dpi == dpi_max)%>%
dplyr::group_by(Mouse_ID) %>%
dplyr::select(c("Mouse_ID", "Parasite_challenge", "infection_history",
"mouse_strain", "max_WL"))
annotation_df <- unique(annotation_df) %>%
dplyr::filter(Mouse_ID %in% colnames(heatmap_data))
annotation_df <- as.data.frame(annotation_df)
### Prepare the annotation columns for the heatmap
rownames(annotation_df) <- annotation_df$Mouse_ID
# Match the row names to the heatmap data frame
rownames(annotation_df) <- colnames(heatmap_data)
#remove the unecessary column
annotation_df <- annotation_df %>% dplyr::select(-Mouse_ID, )
heatmap_lab <- heatmap_data
pheatmap(heatmap_data, annotation_col = annotation_df, scale = "row")
gene <- as_tibble(data) %>%
dplyr::filter(origin == "Field") %>%
dplyr::group_by(Mouse_ID) %>%
drop_na(HI) %>%
dplyr::select(c(Mouse_ID, all_of(Genes_wild)))
gene <- unique(gene)
# I will remove nas. See towards the end of this chunk why I did it in this way
gene <- gene %>% drop_na(MYD88)
#
# turn the data frame into a matrix and transpose it. We want to have each cell
# type as a row name
gene <- t(as.matrix(gene))
#switch the matrix back to a data frame format
gene <- as.data.frame(gene)
# turn the first row into column names
gene %>%
row_to_names(row_number = 1) -> heatmap_data
table(rowSums(is.na(heatmap_data)) == nrow(heatmap_data))
# turn the columns to numeric other wise the heatmap function will not work
heatmap_data[] <- lapply(heatmap_data, function(x) as.numeric(as.character(x)))
# remove columns with only NAs
heatmap_data <- Filter(function(x)!all(is.na(x)), heatmap_data)
#remove rows with only Nas
heatmap_data <-  heatmap_data[, colSums(is.na(heatmap_data)) !=
nrow(heatmap_data)]
#Prepare the annotation data frame
annotation_df <- as_tibble(data) %>%
dplyr::filter(origin == "Field")%>%
dplyr::group_by(Mouse_ID) %>%
dplyr::select(c("Mouse_ID", "Sex", "HI")) %>%
drop_na()
annotation_df <- unique(annotation_df) %>%
dplyr::filter(Mouse_ID %in% colnames(heatmap_data))
annotation_df <- as.data.frame(annotation_df)
### Prepare the annotation columns for the heatmap
rownames(annotation_df) <- annotation_df$Mouse_ID
# Match the row names to the heatmap data frame
rownames(annotation_df) <- colnames(heatmap_data)
#remove the unecessary column
annotation_df <- annotation_df %>% dplyr::select(-Mouse_ID, )
# heatmap gives error: Error in hclust(d, method = method) :
#  NA/NaN/Inf in foreign function call (arg 10)
#Let's figure this out
g_field <- data %>%
dplyr::filter(origin == "Field") %>%
dplyr::group_by(Mouse_ID) %>%
dplyr::select(all_of(Genes_wild))
# How many nas?
is.na(g_field) %>% table()
is.infinite(unlist(g_field)) %>% table() #there are no infinite values
dim(g_field)
is.na(annotation_df) %>% table() # there is an na value in the annotation
# df! that is what is causing the clustering error probably
annotation_df <- annotation_df %>% drop_na()
heatmap_data <- heatmap_data %>%
dplyr::select(row.names(annotation_df))
# I will have to reduce the nas in order to get some clustering going on
# MYD88 is the most complete gene. I will remove the nas from the nas rows of
#this genes further up the analysis and see if it works out
heatmap_field <- heatmap_data
#removed many rows with missing values
pheatmap(heatmap_data, annotation_col = annotation_df, scale = "row")
heatmap_lab_field <- cbind(heatmap_lab, heatmap_field)
#Prepare the annotation data frame
annotation_df <- as_tibble(data) %>%
dplyr::select(origin, Mouse_ID)
annotation_df <- unique(annotation_df) %>%
dplyr::filter(Mouse_ID %in% colnames(heatmap_lab_field))
annotation_df <- as.data.frame(annotation_df)
### Prepare the annotation columns for the heatmap
rownames(annotation_df) <- annotation_df$Mouse_ID
# Match the row names to the heatmap data frame
rownames(annotation_df) <- colnames(heatmap_lab_field)
#remove the unecessary column
annotation_df <- annotation_df %>% dplyr::select(-Mouse_ID, )
pheatmap(heatmap_lab_field, annotation_col = annotation_df, scale = "row")
knitr::opts_chunk$set(echo = TRUE)
library(mice)
library(tidyr)
library(tidyverse)
library(VIM)
library(fitdistrplus)
library(fitur)
library(visdat)
hm <- read.csv("output_data/MICE.csv")
knitr::opts_chunk$set(echo = TRUE)
library(mice)
library(tidyr)
library(tidyverse)
library(VIM)
library(fitdistrplus)
library(fitur)
library(visdat)
hm <- read.csv("output_data/1.MICE_cleaned_data")
knitr::opts_chunk$set(echo = TRUE)
library(mice)
library(tidyr)
library(tidyverse)
library(VIM)
library(fitdistrplus)
library(fitur)
library(visdat)
hm <- read.csv("output_data/1.MICE_cleaned_data")
getwd)
getwd()
hm <- read.csv("output_data/1.MICE_cleaned_data")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyr)
library(dplyr)
library(janitor)
library(visdat)
library(corrplot)
library(RColorBrewer)
library(ggplot2)
MICE <- read.csv("output_data/MICE.csv")
