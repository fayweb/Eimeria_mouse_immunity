geom_boxplot()
ggplot(iris) +
aes(x = Sepal.Width, y = Sepal.Length, colour = Species) +
geom_violin()
ggplot(iris) +
aes(x = Species, y = Sepal.Length, colour = Species) +
geom_boxplot()
ggplot(iris) +
aes(x = Species, y = Sepal.Length, colour = Species) +
geom_violin()
ggplot(iris) +
aes(x = Species, y = Sepal.Length, colour = Species) +
geom_jitter()
ggplot(iris) +
aes(x = Species, y = Sepal.Length, colour = Species) +
geom_violin() +
geom_boxplot)width = 0.1) +
geom_jitter()
ggplot(iris) +
aes(x = Species, y = Sepal.Length, colour = Species) +
geom_violin() +
geom_boxplot(width = 0.1) +
geom_jitter(width = 0.05)
ggsave("my_first_plot.pdf", width = 15, height =10, units = "cm")
ggsave("my_first_plot.pdf", width = 15, height = 10, units = "cm")
update.packages(ask = FALSE)
knitr::opts_chunk$set(echo = TRUE)
print("hello world")
print("hello fellow coursera studen")
print("hello fellow coursera student")
source('~/GitHub/Eimeria_Lab/R/Challenge_infection_intensities.R')
library
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(stringr)
library(janitor)
#reading our own field data
SOTA <- read.csv("data_products/SOTA_Data_Product.csv")
Data <- read.csv("field_mouse_eimeria/Field trip 2019 data sheet_Hongwei 20211122_edit_Fay - Sheet2.csv")
#reading our own field data
SOTA <- read.csv("data_products/SOTA_Data_Product.csv")
#reading our own field data
SOTA <- read.csv("https://raw.githubusercontent.com/derele/Mouse_Eimeria_Field/master/data_products/SOTA_Data_Product.csv")
Data <- read.csv("https://raw.githubusercontent.com/fayweb/Eimeria-PhD-Project/gh-pages/field_mouse_eimeria/Field%20trip%202019%20data%20sheet_Hongwei%2020211122_edit_Fay%20-%20Sheet2.csv")
#removing empty columns
Data <- remove_empty(Data, which = c("cols"), quiet = TRUE)
#changing column names of worms to reflect SOTA
Data <- rename(Data, Aspiculuris_sp = ASP, Syphacia_sp = SYP, Mastophorus_muris = MM,
Trichuris_muris = TM)
write.csv(Data, "data_input/FU_Immune_Worms.csv", row.names = FALSE)
#cell count columns from SOTA from MLN
CellCount.cols <- c("CD8", "Treg", "CD4", "Treg17", "Th1", "Th17",
"Act_CD8", "IFNy_CD4", "IL17A_CD4", "IFNy_CD8")
#select only mouse id from Data
Data_Mouse_id <- Data %>%
select(Mouse_ID)
#extract our immune data from sota
SOTA_Immune <- SOTA %>%
select(Mouse_ID, all_of(CellCount.cols)) %>%
right_join(Data_Mouse_id, by = "Mouse_ID")
SOTA_Immune <- SOTA_Immune %>%
rename(CD4_mLN = CD4, CD8_mLN = CD8, Foxp3_in_CD4_Treg_mLN = Treg,
CD4_mLN = CD4, Tbet_in_CD4_Foxp3_Th1_mLN = Th1)
cor(SOTA_Immune, Data, use = "pairwise.complete.obs")
Data_selection <- Data %>%
select(Mouse_ID, CD4_mLN, CD8_mLN, Foxp3_in_CD4_Treg_mLN, )
#comparing Treg counts from spleen
Treg_Sota <- SOTA %>%
select(Mouse_ID, Treg)
Treg_FU <- Data %>%
select(Mouse_ID, Foxp3..in.CD4...Treg..mLN) %>%
left_join(Treg_Sota, by = "Mouse_ID")
#see if there are any correlations between our data and fu data
cor(Treg_FU$Treg, Treg_FU$Foxp3..in.CD4...Treg..mLN, use = "pairwise.complete.obs")
CD8_Sota <- SOTA %>%
select(Mouse_ID, CD8)
CD8_FU <- Data %>%
select(Mouse_ID, CD8..mLN) %>%
left_join(CD8_Sota, by = "Mouse_ID")
CD8_FU <- CD8_FU[complete.cases(CD8_FU), ]
CD8_FU <- CD8_FU %>%
mutate(CD8..mLN = as.numeric(CD8..mLN))
cor(CD8_FU$CD8, CD8_FU$CD8..mLN, use = "pairwise.complete.obs")
CD4_Sota <- SOTA %>%
select(Mouse_ID, CD4)
CD4_FU <- Data %>%
select(Mouse_ID, CD4..mLN) %>%
left_join(CD4_Sota, by = "Mouse_ID")
CD4_FU <- CD4_FU[complete.cases(CD4_FU), ]
CD4_FU <- CD4_FU %>%
mutate(CD4..mLN = as.numeric(CD4..mLN))
cor(CD4_FU$CD4, CD4_FU$CD4..mLN, use = "pairwise.complete.obs")
source('~/GitHub/Eimeria-PhD-Project/field_mouse_eimeria/Wild_mice_immuno_Fu.R')
#removing empty columns
Data <- remove_empty(Data, which = c("cols"), quiet = TRUE)
#changing column names of worms to reflect SOTA
Data <- rename(Data, Aspiculuris_sp = ASP, Syphacia_sp = SYP, Mastophorus_muris = MM,
Trichuris_muris = TM)
write.csv(Data, "data_input/FU_Immune_Worms.csv", row.names = FALSE)
#cell count columns from SOTA from MLN
CellCount.cols <- c("CD8", "Treg", "CD4", "Treg17", "Th1", "Th17",
"Act_CD8", "IFNy_CD4", "IL17A_CD4", "IFNy_CD8")
#select only mouse id from Data
Data_Mouse_id <- Data %>%
select(Mouse_ID)
#extract our immune data from sota
SOTA_Immune <- SOTA %>%
select(Mouse_ID, all_of(CellCount.cols)) %>%
right_join(Data_Mouse_id, by = "Mouse_ID")
SOTA_Immune <- SOTA_Immune %>%
rename(CD4_mLN = CD4, CD8_mLN = CD8, Foxp3_in_CD4_Treg_mLN = Treg,
CD4_mLN = CD4, Tbet_in_CD4_Foxp3_Th1_mLN = Th1)
cor(SOTA_Immune, Data, use = "pairwise.complete.obs")
Data_selection <- Data %>%
select(Mouse_ID, CD4_mLN, CD8_mLN, Foxp3_in_CD4_Treg_mLN, )
#comparing Treg counts from spleen
Treg_Sota <- SOTA %>%
select(Mouse_ID, Treg)
Treg_FU <- Data %>%
select(Mouse_ID, Foxp3..in.CD4...Treg..mLN) %>%
left_join(Treg_Sota, by = "Mouse_ID")
#see if there are any correlations between our data and fu data
cor(Treg_FU$Treg, Treg_FU$Foxp3..in.CD4...Treg..mLN, use = "pairwise.complete.obs")
#comparing Treg counts from spleen
Treg_Sota <- SOTA %>%
select(Mouse_ID, Treg)
Treg_FU <- Data %>%
select(Mouse_ID, Foxp3..in.CD4...Treg..mLN) %>%
left_join(Treg_Sota, by = "Mouse_ID")
#see if there are any correlations between our data and fu data
cor(Treg_FU$Treg, Treg_FU$Foxp3..in.CD4...Treg..mLN, use = "pairwise.complete.obs")
#extract our immune data from sota
SOTA_Immune <- SOTA %>%
select(Mouse_ID, all_of(CellCount.cols)) %>%
right_join(Data_Mouse_id, by = "Mouse_ID")
SOTA_Immune <- SOTA_Immune %>%
rename(CD4_mLN = CD4, CD8_mLN = CD8, Foxp3_in_CD4_Treg_mLN = Treg,
CD4_mLN = CD4, Tbet_in_CD4_Foxp3_Th1_mLN = Th1)
cor(SOTA_Immune, Data, use = "pairwise.complete.obs")
Data_selection <- Data %>%
select(Mouse_ID, CD4_mLN, CD8_mLN, Foxp3_in_CD4_Treg_mLN, )
#comparing Treg counts from spleen
Treg_Sota <- SOTA %>%
select(Mouse_ID, Treg)
Treg_FU <- Data %>%
select(Mouse_ID, Foxp3..in.CD4...Treg..mLN) %>%
left_join(Treg_Sota, by = "Mouse_ID")
install.packages("tidyverse")
install.packages("ggrepel")
install.packages("gplot")
install.packages("ggplot2")
install.packages("cowplot")
install.packages("lme4")
install.packages("nlme")
install.packages("gapminder")
install.packages("devtools")
install.packages("roxygen2")
install.packages("hrbrthemes")
install.packages("esquisse")
devtools::install_github("hrbrmstr/hrbrthemes")
library(ggplot2)
library(colorDF)
library(tidyverse)
install.packages("colorDF")
library(ggplot2)
library(colorDF)
library(tidyverse)
library(ggplot2)
library(ggplot2)
library(colorDF)
library(tidyverse)
g1 <- ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length)) + geom_point()
g1
as.formula("~ a")
lm_wrapper <- function(data, x_name, y_name) {
formula <- paste(y_name, "~", x_name)
message("Using formula:", formula)
lm(as.formula(formula), data=data)
}
data <- data.frame(x=rnorm(100))
data$y <- rnorm(100) + data$x
plot(data$x, data$y)
lm(y ~ x, data=data)
lm_wrapper(data, "x", "y")
# Create an alternative "summary" function for a data frame,
#such that if I type "summary(mtcars)" I will see the result of that function.
summary(mtcars)
summary.data.frame(mtcars)
summary(mtcars)
summary(mtcars)
summary.data.frame <- function(X) {
print("Blop!")
}
summary(mtcars)
#Create a new class: sets
#Create a function called set which turns a vector (character or otherwise)
#o a set, just by adding the class set. (look at the example from the lecture)
set <- function(x) {
if(!is(x, "set")) {
class(x) <- c("set", class(x))
}
x
}
set(1:100)
set(set(1:10))
print(unclass(x))
print.set <- function(x) {
print(unclass(x))
}
print(1:100)
print("hello")
summary.set <- function(x) {
print("hello")
}
summary(set(1:100))
`+.set` <- function(x, y) { set(union(x, y)) }
ls
?set
??set
![Protocol page 1](Protocol_dna_extraction-1)
![Protocol page 2](Protocol_dna_extraction-2)
![Protocol page 2]('Protocol_dna_extraction-2')
library(ggplot2)
library(tidyr)
library(dplyr)
source("r_scripts/gene_expression/02_gene_correlation_matrix.R")
### Remove unecssary files from the environment
rm(annotation_df, basics_gene, gene, heatmap_data)
#switch off all dev devices
while (!is.null(dev.list()))  dev.off()
jpeg("output_data/gene_expression/04_weight_dpi_primary.jpg", width = 800,
height = 600)
# Primary:
Challenge %>%
filter(infection == "primary", !dpi %in% "0", death == "primary") %>%
drop_na(weight_dpi0, relative_weight) %>%
group_by("EH_ID") %>%
ggplot(aes(x = dpi, y = relative_weight, color = primary_infection)) +
geom_jitter() +
stat_smooth() +
labs(x = "Days Post Infection", y = "Relative weight to first day",
title = "Weight changes during the course of the primary infection")
dev.off()
jpeg("output_data/gene_expression/05_weight_dpi_challenge.jpg", width = 800,
height = 600)
getwd()
setwd("C:/Users/fay_w/OneDrive/Documents/GitHub/Eimeria_mouse_immunity")
library(ggplot2)
library(tidyr)
library(dplyr)
source("r_scripts/gene_expression/02_gene_correlation_matrix.R")
### Remove unecssary files from the environment
rm(annotation_df, basics_gene, gene, heatmap_data)
#switch off all dev devices
while (!is.null(dev.list()))  dev.off()
jpeg("output_data/gene_expression/04_weight_dpi_primary.jpg", width = 800,
height = 600)
# Primary:
Challenge %>%
filter(infection == "primary", !dpi %in% "0", death == "primary") %>%
drop_na(weight_dpi0, relative_weight) %>%
group_by("EH_ID") %>%
ggplot(aes(x = dpi, y = relative_weight, color = primary_infection)) +
geom_jitter() +
stat_smooth() +
labs(x = "Days Post Infection", y = "Relative weight to first day",
title = "Weight changes during the course of the primary infection")
dev.off()
# Primary:
Challenge %>%
filter(infection == "primary", !dpi %in% "0", death == "primary") %>%
drop_na(weight_dpi0, relative_weight) %>%
group_by("EH_ID") %>%
ggplot(aes(x = dpi, y = relative_weight, color = primary_infection)) +
geom_jitter() +
stat_smooth() +
labs(x = "Days Post Infection", y = "Relative weight to first day",
title = "Weight changes during the course of the primary infection")
Challenge %>%
filter(infection == "challenge", !dpi %in% "0", death == "challenge") %>%
drop_na(weight_dpi0, relative_weight) %>%
group_by("EH_ID") %>%
ggplot(aes(x = dpi, y = relative_weight, color = challenge_infection)) +
geom_jitter() +
stat_smooth() +
labs(x = "Days Post Infection", y = "Relative weight to first day",
title = "Weight changes during the course of infection")
Challenge %>%
drop_na(OOC) %>%
group_by("EH_ID") %>%
filter(infection == "primary", death == "primary") %>%
ggplot(aes(x = dpi, y = OOC, color = primary_infection)) +
geom_point(position = position_jitterdodge()) +
stat_smooth() +
labs(x = "Days Post Infection", y = "Oocysts per gram",
title = "Oocyst shedding in primary infections during the
course of infection")
Challenge %>%
drop_na(OOC) %>%
group_by("EH_ID") %>%
filter(infection == "primary", death == "primary") %>%
ggplot(aes(x = dpi, y = OOC, color = primary_infection)) +
geom_point(position = position_jitterdodge()) +
stat_smooth() +
scale_y_log10() +
labs(x = "Days Post Infection", y = "Oocysts per gram",
title = "Oocyst shedding in primary infections during the
course of infection")
Challenge %>%
drop_na(OOC) %>%
group_by("EH_ID") %>%
filter(infection == "challenge") %>%
ggplot(aes(x = dpi, y = OOC, color = challenge_infection)) +
geom_point(position = position_jitterdodge()) +
stat_smooth() +
labs(x = "Days Post Infection", y = "Oocysts per gram",
title = "Oocyst shedding in challenge infections during the
course of infection")
Challenge %>%
drop_na(OOC) %>%
group_by("EH_ID") %>%
filter(infection == "challenge") %>%
ggplot(aes(x = dpi, y = OOC, color = challenge_infection)) +
geom_point(position = position_jitterdodge()) +
stat_smooth() +
scale_y_log10() +
labs(x = "Days Post Infection", y = "Oocysts per gram",
title = "Oocyst shedding in challenge infections during the
course of infection")
Challenge %>%
drop_na(OOC) %>%
group_by("EH_ID") %>%
filter(infection == "challenge") %>%
ggplot(aes(x = dpi, y = OOC, color = challenge_infection)) +
geom_point(position = position_jitterdodge()) +
stat_smooth() +
labs(x = "Days Post Infection", y = "Oocysts per gram",
title = "Oocyst shedding in challenge infections during the
course of infection")
# primary
Challenge %>%
drop_na(delta, max_WL) %>%
group_by("EH_ID") %>%
filter(infection == "primary", Eim_MC == "TRUE", death == "primary") %>%
ggplot(aes(x = delta, y = max_WL, color = primary_infection)) +
geom_jitter() +
labs(x = "Maximum weight loss of each mouse", y = "Delta Ct, Infection intensity",
title = "Maximum Weight loss for each mouse and infection intensity,
primary infections")
# primary
Challenge %>%
drop_na(delta, max_WL) %>%
group_by("EH_ID") %>%
filter(infection == "primary", Eim_MC == "TRUE", death == "primary") %>%
ggplot(aes(x = delta, y = max_WL, color = primary_infection)) +
geom_jitter() +
labs(x = "Delta Ct, Infection intensity", y = "Maximum weight loss of each mouse",
title = "Maximum Weight loss for each mouse and infection intensity,
primary infections")
# challenge
Challenge %>%
drop_na(delta, max_WL) %>%
group_by("EH_ID") %>%
filter(infection == "challenge", Eim_MC == "TRUE", death == "challenge") %>%
ggplot(aes(x = max_WL, y = delta, color = challenge_infection)) +
geom_jitter() +
labs(x = "Maximum weight loss of each mouse", y = "Delta Ct, Infection intensity",
title = "Maximum Weight loss for each mouse and infection intensity,
challenge infections") +
stat_smooth()
# challenge
Challenge %>%
drop_na(delta, max_WL) %>%
group_by("EH_ID") %>%
filter(infection == "challenge", Eim_MC == "TRUE", death == "challenge") %>%
ggplot(aes(x = delta, y = max_WL, color = challenge_infection)) +
geom_jitter() +
labs(x = "Delta Ct, Infection intensity", y = "Maximum weight loss of each mouse",
title = "Maximum Weight loss for each mouse and infection intensity,
challenge infections") +
stat_smooth()
# challenge
Challenge %>%
drop_na(delta, max_WL) %>%
group_by("EH_ID") %>%
filter(infection == "challenge", Eim_MC == "TRUE", death == "challenge") %>%
ggplot(aes(x = delta, y = max_WL, color = challenge_infection)) +
geom_jitter() +
labs(x = "Delta Ct, Infection intensity", y = "Maximum weight loss of each mouse",
title = "Maximum Weight loss for each mouse and infection intensity,
challenge infections") +
stat_smooth() +
scale_x_log10()
# challenge
Challenge %>%
drop_na(delta, max_WL) %>%
group_by("EH_ID") %>%
filter(infection == "challenge", Eim_MC == "TRUE", death == "challenge") %>%
ggplot(aes(x = delta, y = max_WL, color = challenge_infection)) +
geom_jitter() +
labs(x = "Delta Ct, Infection intensity", y = "Maximum weight loss of each mouse",
title = "Maximum Weight loss for each mouse and infection intensity,
challenge infections") +
stat_smooth()
# Now plot the gene expression agains infection intensity
# Use the data frame that has been already cleaned for nas
gene_expr_delta <- gene_na_omit %>%
pivot_longer(cols = 8:28, names_to = "Gene", values_to = "gene_expression") %>%
na.omit(expression) %>%
ggplot(aes(x = delta, y = gene_expression, color = challenge_infection))
gene_expr_delta +
geom_jitter() +
facet_wrap(~ Gene, scales = "free") +
theme_bw()
gene_expr_delta +
geom_jitter() +
facet_wrap(~ Gene, scales = "free") +
theme_void()
gene_expr_delta +
geom_jitter() +
facet_wrap(~ Gene, scales = "free") +
theme_light()
gene_expr_delta +
geom_jitter() +
facet_wrap(~ Gene, scales = "free") +
theme_dark()
gene_expr_delta +
geom_jitter() +
facet_wrap(~ Gene, scales = "free") +
theme_classic()
gene_expr_delta +
geom_jitter() +
facet_wrap(~ Gene, scales = "free") +
theme_minimal()
gene_expr_delta +
geom_jitter() +
facet_wrap(~ Gene, scales = "free") +
theme_light()
gene_expr_delta +
geom_jitter() +
facet_wrap(~ Gene, scales = "free") +
theme_light(panel.background = element_rect(fill = "blue"))
gene_expr_delta +
geom_jitter() +
facet_wrap(~ Gene, scales = "free") +
theme_light()
gene_expr_delta +
geom_jitter() +
facet_wrap(~ Gene, scales = "free") +
theme_light() +
labs(x = "Delta Ct, Infection intensity", y = "Gene expression",
title = "Gene expression to gene expression")
gene_na_omit %>%
pivot_longer(cols = 8:28, names_to = "Gene", values_to = "gene_expression") %>%
na.omit(expression) %>%
ggplot(aes(x = challenge_infection, y = gene_expression, color = challenge_infection))+
geom_boxplot() +
geom_jitter() +
facet_wrap(~ Gene, scales = "free") +
theme_bw()
gene_na_omit %>%
pivot_longer(cols = 8:28, names_to = "Gene", values_to = "gene_expression") %>%
na.omit(expression) %>%
ggplot(aes(x = challenge_infection, y = gene_expression, color = challenge_infection))+
geom_boxplot() +
geom_jitter() +
facet_wrap(~ Gene, scales = "free") +
theme_bw() +
labs(x = "Infection groups, E64 = E. ferrisi, E88 = E.falciformis,
UNI = Uninfected", y = "Gene expression",
title = "Gene expression in response to infection group")
gene_na_omit %>%
pivot_longer(cols = 8:28, names_to = "Gene", values_to = "gene_expression") %>%
na.omit(expression) %>%
ggplot(aes(x = delta, y = gene_expression, color = challenge_infection)) +
geom_jitter() +
facet_wrap(~ c(challenge_infection, gene), scales = "free") +
theme_bw() +
labs(x = "Delta Ct, Infection intensity", y = "Gene expression",
title = "Gene expression in response to infection intensity")
gene_na_omit %>%
pivot_longer(cols = 8:28, names_to = "Gene", values_to = "gene_expression") %>%
na.omit(expression) %>%
ggplot(aes(x = delta, y = gene_expression, color = challenge_infection)) +
geom_jitter() +
facet_wrap(~ c(challenge_infection, gene), scales = "free") +
theme_bw() +
labs(x = "Delta Ct, Infection intensity", y = "Gene expression",
title = "Gene expression in response to infection intensity")
jpeg("output_data/gene_expression/10_gene_expression_intensity", width = 800, height = 600)
gene_expr_delta +
geom_jitter() +
facet_wrap(~ Gene, scales = "free") +
theme_light() +
labs(x = "Delta Ct, Infection intensity", y = "Gene expression",
title = "Gene expression in response to infection intensity")
dev.off()
gene_expr_delta +
geom_jitter() +
facet_wrap(~ Gene, scales = "free") +
theme_light() +
labs(x = "Delta Ct, Infection intensity", y = "Gene expression",
title = "Gene expression in response to infection intensity")
dev.off()
gene_expr_delta +
geom_jitter() +
facet_wrap(~ Gene, scales = "free") +
theme_light() +
labs(x = "Delta Ct, Infection intensity", y = "Gene expression",
title = "Gene expression in response to infection intensity")
