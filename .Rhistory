class(x) <- c("set", class(x))
}
x
}
set(1:100)
set(set(1:10))
print(unclass(x))
print.set <- function(x) {
print(unclass(x))
}
print(1:100)
print("hello")
summary.set <- function(x) {
print("hello")
}
summary(set(1:100))
`+.set` <- function(x, y) { set(union(x, y)) }
ls
?set
??set
![Protocol page 1](Protocol_dna_extraction-1)
![Protocol page 2](Protocol_dna_extraction-2)
![Protocol page 2]('Protocol_dna_extraction-2')
setwd("~/OneDrive/Documents/GitHub/Eimeria_mouse_immunity")
getwd()
setwd("C:/Users/fay_w/OneDrive/Documents/GitHub/Eimeria_mouse_immunity")
source("~/GitHub/Eimeria_mouse_immunity/r_scripts/facs/01_facs_pheatmap.R")
View(heatmap_data)
library(tidyverse)
library(tidyr)
library(janitor)
library(tibble)
library(pheatmap)
library(matrixStats)
library(tibble)
### Import the data
Challenge <- read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data_products/Challenge_infections.csv")
## vectors for selecting columns
CellCount.cols <- c("Position", "CD4", "Treg", "Div_Treg", "Treg17", "Th1",
"Div_Th1", "Th17", "Div_Th17", "CD8", "Act_CD8",
"Div_Act_CD8", "IFNy_CD4", "IFNy_CD8","Treg_prop",
"IL17A_CD4")
### Select the measurements from the mesenterial lymphnodes
# The spleen measurements are not so plenty and not comparable to the mln
# measurements
Challenge <- Challenge %>% filter(Position == "mLN")
### Drop the columns that contain nas in the column CD4 of the facs columns
FACS <- Challenge %>% drop_na("CD4")
### Prepare the annotation data frame for the heatmap
annotation_df <- FACS %>%
filter(infection == "challenge") %>%
select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL"))
### Data tidying for the heatmap function
FACS <- FACS  %>%
select(c(EH_ID, CellCount.cols))
# turn the data frame into a matrix and transpose it. We want to have each cell
# type as a row name
FACS <- t(as.matrix(FACS))
#switch the matrix back to a data frame format
FACS <- as.data.frame(FACS)
# turn the first row into column names
FACS %>%
row_to_names(row_number = 1) -> FACS
# Now further prepare the data frame for plotting by removing the first row
## and convert the column to row names with the cells
FACS[-1, ] -> heatmap_data
# How do our data look like?
glimpse(heatmap_data) #alll columns appear to be characters
# turn the columns to numeric other wise the heatmap function will not work
heatmap_data[] <- lapply(heatmap_data, function(x) as.numeric(as.character(x)))
### Prepare the annotation columns for the heatmap
rownames(annotation_df) <- annotation_df$EH_ID
# Match the row names to the heatmap data frame
rownames(annotation_df) <- colnames(FACS)
#remove the unecessary column
annotation_df <- annotation_df %>% select(-EH_ID, )
#plot the heatmap
jpeg("output_data/Pheatmap_facs_lab.jpg", width = 1400, height = 1000)
heatmap_data %>%
pheatmap(annotation_col = annotation_df, scale = "row")
#close the jpeg file
dev.off()
library(pheatmap)
library(tidyverse)
library(matrixStats)
library(tidyr)
library(janitor)
library(tibble)
### Import the data
Challenge <- read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data_products/Challenge_infections.csv")
gene <- as_tibble(Challenge) %>%
filter(infection == "challenge", dpi == "8") %>%
group_by(EH_ID, infection) %>%
select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL", ends_with("_N")))
View(gene)
summarize(max_OOC = max(OOC, na.rm=TRUE),
max_WL = min(relative_weight, na.rm=TRUE),
experiment = unique(experiment),
mouse_strain= unique(mouse_strain),
primary_infection=unique(primary_infection),
challenge_infection=unique(challenge_infection),
infection_history=unique(infection_history),
infection_type=unique(infection_type),
experiment=unique(experiment)) -> %>%
filter(infection == "challenge") %>%
group_by("EH_ID") %>%
select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL", ends_with("_N")))
glimpse(gene)
View(gene)
bsaics_gene <- as_tibble(Challenge) %>%
filter(infection == "challenge", dpi == "8") %>%
group_by(EH_ID, infection) %>%
select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL", ends_with("_N")))
basics_gene <- as_tibble(Challenge) %>%
filter(infection == "challenge", dpi == "8") %>%
group_by(EH_ID, infection) %>%
select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL", ends_with("_N")))
library(pheatmap)
library(tidyverse)
library(matrixStats)
library(tidyr)
library(janitor)
library(tibble)
### Import the data
Challenge <- read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data_products/Challenge_infections.csv")
#cor(Challenge[, grepl("_N", colnames(Challenge))], use="pairwise.complete.obs")
##  select(ends_with("_N")) those are the gene expression column
### select the columns you want to plot
##  filter(if_any(everything(), ~ !is.na(.)))%>% ## remove rows only NA
##  summarise_each(funs(sum(is.na(.)))) ### remove columns only NA
##....
##...
##pheatmap() ## do the pheatmap
basics_gene <- as_tibble(Challenge) %>%
filter(infection == "challenge", dpi == "8") %>%
group_by(EH_ID, infection) %>%
select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL", ends_with("_N")))
gene <- basics_gene %>% select(c(EH_ID, ends_with("_N")))
View(gene)
View(Challenge)
basics_gene <- as_tibble(Challenge) %>%
filter(infection == "challenge", dpi == "8") %>%
group_by(EH_ID, infection) %>%
select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL", ends_with("_N")))
View(basics_gene)
gene <- basics_gene %>% select(c(EH_ID, ends_with("_N")))
basics_gene <- as_tibble(Challenge) %>%
dplyr::filter(infection == "challenge", dpi == "8") %>%
dplyr::group_by(EH_ID, infection) %>%
dplyr::select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL", ends_with("_N")))
basics_gene <- as_tibble(Challenge) %>%
dplyr::filter(infection == "challenge", dpi == "8") %>%
dplyr::group_by(EH_ID, infection) %>%
dplyr::select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL", ends_with("_N"))) %>%
dplyr::ungroup() %>%
dplyr::select(-infection)
basics_gene <- as_tibble(Challenge) %>%
dplyr::filter(infection == "challenge", dpi == "8") %>%
dplyr::group_by(EH_ID, infection) %>%
dplyr::select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL", ends_with("_N"))) %>%
dplyr::select(-infection)
basics_gene <- as_tibble(Challenge) %>%
dplyr::filter(infection == "challenge", dpi == "8") %>%
dplyr::group_by(EH_ID, infection) %>%
dplyr::select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL", ends_with("_N"))) %>%
dplyr::select(-infection)
View(basics_gene)
gene <- basics_gene %>% select(-infection) %>%dplyr::select(c(EH_ID, ends_with("_N")))
gene <- basics_gene %>% select(-infection) %>% dplyr::select(c(EH_ID, ends_with("_N")))
View(gene)
gene <- as.data.frame(basics_gene) %>% select(-infection) %>% dplyr::select(c(EH_ID, ends_with("_N")))
View(gene)
# turn the data frame into a matrix and transpose it. We want to have each cell
# type as a row name
gene <- t(as.matrix(gene))
View(gene)
#switch the matrix back to a data frame format
gene <- as.data.frame(gene)
View(gene)
# turn the first row into column names
gene %>%
row_to_names(row_number = 1) -> gene
View(gene)
View(basics_gene)
duplicated(basics_gene)
basics_gene <- unique(basics_gene)
gene <- as.data.frame(basics_gene) %>% select(-infection) %>% dplyr::select(c(EH_ID, ends_with("_N")))
# turn the data frame into a matrix and transpose it. We want to have each cell
# type as a row name
gene <- t(as.matrix(gene))
#switch the matrix back to a data frame format
gene <- as.data.frame(gene)
# turn the first row into column names
gene %>%
row_to_names(row_number = 1) -> gene
# Now further prepare the data frame for plotting by removing the first row
## and convert the column to row names with the cells
gene[-1, ] -> heatmap_data
View(heatmap_data)
table(rowSums(is.na(heatmap_data))==nrow(heatmap_data))
#hhh
# How do our data look like?
glimpse(heatmap_data) #alll columns appear to be numeric
# turn the columns to numeric other wise the heatmap function will not work
heatmap_data[] <- lapply(heatmap_data, function(x) as.numeric(as.character(x)))
View(heatmap_data)
glimpse(heatmap_data)
# remove columns with only NAs
heatmap_data2 <- heatmap_data %>% Filter(function(x)!all(is.na(x)), gene)
# remove columns with only NAs
heatmap_data2 <- heatmap_data %>% Filter(function(x)!all(is.na(x)), heatmap_data)
# remove columns with only NAs
heatmap_data2 <- Filter(function(x)!all(is.na(x)), heatmap_data)
View(heatmap_data2)
View(heatmap_data2)
View(heatmap_data2)
View(heatmap_data)
View(heatmap_data2)
# remove columns with only NAs
heatmap_data2 <- Filter(function(x)!all(is.na(x)), heatmap_data) %>%
summarise_each(funs(sum(is.na(.))))
heatmap_data2 <- heatmap_data2 %>% summarise_each(funs(sum(is.na(.))))
View(heatmap_data2)
heatmap_data2[, colSums(is.na( heatmap_data2)) != nrow(heatmap_data2)]
library(pheatmap)
library(tidyverse)
library(matrixStats)
library(tidyr)
library(janitor)
library(tibble)
### Import the data
Challenge <- read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data_products/Challenge_infections.csv")
#cor(Challenge[, grepl("_N", colnames(Challenge))], use="pairwise.complete.obs")
##  select(ends_with("_N")) those are the gene expression column
### select the columns you want to plot
##  filter(if_any(everything(), ~ !is.na(.)))%>% ## remove rows only NA
##  summarise_each(funs(sum(is.na(.)))) ### remove columns only NA
##....
##...
##pheatmap() ## do the pheatmap
basics_gene <- as_tibble(Challenge) %>%
dplyr::filter(infection == "challenge", dpi == "8") %>%
dplyr::group_by(EH_ID, infection) %>%
dplyr::select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL", ends_with("_N")))
basics_gene <- unique(basics_gene)
gene <- as.data.frame(basics_gene) %>% select(-infection) %>% dplyr::select(c(EH_ID, ends_with("_N")))
# turn the data frame into a matrix and transpose it. We want to have each cell
# type as a row name
gene <- t(as.matrix(gene))
#switch the matrix back to a data frame format
gene <- as.data.frame(gene)
# turn the first row into column names
gene %>%
row_to_names(row_number = 1) -> gene
# Now further prepare the data frame for plotting by removing the first row
## and convert the column to row names with the cells
gene[-1, ] -> heatmap_data
table(rowSums(is.na(heatmap_data))==nrow(heatmap_data))
# How do our data look like?
glimpse(heatmap_data) #alll columns appear to be numeric
# turn the columns to numeric other wise the heatmap function will not work
heatmap_data[] <- lapply(heatmap_data, function(x) as.numeric(as.character(x)))
# remove columns with only NAs
heatmap_data2 <- Filter(function(x)!all(is.na(x)), heatmap_data)
heatmap_data2 <- heatmap_data2 %>% summarise_each(funs(sum(is.na(.))))
View(heatmap_data2)
View(heatmap_data)
# remove columns with only NAs
heatmap_data2 <- Filter(function(x)!all(is.na(x)), heatmap_data)
View(heatmap_data)
View(heatmap_data2)
View(heatmap_data)
View(heatmap_data2)
basics_gene
basics_gene <- as_tibble(Challenge) %>%
dplyr::filter(infection == "challenge", dpi == "8") %>%
dplyr::group_by(EH_ID, infection) %>%
dplyr::select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL", ends_with("_N")))
basics_gene <- unique(basics_gene)
gene <- as.data.frame(basics_gene) %>% select(-infection) %>% dplyr::select(c(EH_ID, ends_with("_N")))
# turn the data frame into a matrix and transpose it. We want to have each cell
# type as a row name
gene <- t(as.matrix(gene))
#switch the matrix back to a data frame format
gene <- as.data.frame(gene)
# turn the first row into column names
gene %>%
row_to_names(row_number = 1) -> gene
# Now further prepare the data frame for plotting by removing the first row
## and convert the column to row names with the cells
gene[-1, ] -> heatmap_data
table(rowSums(is.na(heatmap_data))==nrow(heatmap_data))
# How do our data look like?
glimpse(heatmap_data) #alll columns appear to be numeric
# turn the columns to numeric other wise the heatmap function will not work
heatmap_data[] <- lapply(heatmap_data, function(x) as.numeric(as.character(x)))
# remove columns with only NAs
heatmap_data <- Filter(function(x)!all(is.na(x)), heatmap_data)
heatmap_data <- heatmap_data %>% summarise_each(funs(sum(is.na(.))))
heatmap_data[, colSums(is.na( heatmap_data2)) != nrow(heatmap_data)]
heatmap_data[, colSums(is.na( heatmap_data)) != nrow(heatmap_data)]
View(gene)
rm(gene)
rm(heatmap_data2)
### Prepare the annotation data frame for the heatmap
annotation_df <- basics_gene %>%
filter(infection == "challenge") %>%
select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL"))
View(basics_gene)
View(annotation_df)
basics_gene <- unique(basics_gene) %>% as.data.frame(basics_gene)
# remove duplicated and change the format to data frame
basics_gene <- unique(basics_gene) %>% as.data.frame(basics_gene)
gene <- basics_gene %>% select(-infection) %>% dplyr::select(c(EH_ID, ends_with("_N")))
library(pheatmap)
library(tidyverse)
library(matrixStats)
library(tidyr)
library(janitor)
library(tibble)
### Import the data
Challenge <- read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data_products/Challenge_infections.csv")
#cor(Challenge[, grepl("_N", colnames(Challenge))], use="pairwise.complete.obs")
basics_gene <- as_tibble(Challenge) %>%
dplyr::filter(infection == "challenge", dpi == "8") %>%
dplyr::group_by(EH_ID, infection) %>%
dplyr::select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL", ends_with("_N")))
# remove duplicated and change the format to data frame
basics_gene <- unique(basics_gene) %>% as.data.frame(basics_gene)
gene <- basics_gene %>% select(-infection) %>% dplyr::select(c(EH_ID, ends_with("_N")))
# turn the data frame into a matrix and transpose it. We want to have each cell
# type as a row name
gene <- t(as.matrix(gene))
#switch the matrix back to a data frame format
gene <- as.data.frame(gene)
# turn the first row into column names
gene %>%
row_to_names(row_number = 1) -> gene
# Now further prepare the data frame for plotting by removing the first row
## and convert the column to row names with the cells
gene[-1, ] -> heatmap_data
table(rowSums(is.na(heatmap_data))==nrow(heatmap_data))
rm(gene)
rm(gene)
# How do our data look like?
glimpse(heatmap_data) #alll columns appear to be numeric
# turn the columns to numeric other wise the heatmap function will not work
heatmap_data[] <- lapply(heatmap_data, function(x) as.numeric(as.character(x)))
# remove columns with only NAs
heatmap_data <- Filter(function(x)!all(is.na(x)), heatmap_data)
#remove rows with only Nas
heatmap_data <- heatmap_data %>% summarise_each(funs(sum(is.na(.))))
### Prepare the annotation data frame for the heatmap
annotation_df <- basics_gene %>%
filter(infection == "challenge") %>%
select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL"))
View(annotation_df)
### Prepare the annotation data frame for the heatmap
annotation_df <- basics_gene %>%
select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL"))
annotation_df <- as.data.frame(annotation_df)
### Prepare the annotation columns for the heatmap
rownames(annotation_df) <- annotation_df$EH_ID
# Match the row names to the heatmap data frame
rownames(annotation_df) <- colnames(gene)
#remove the unecessary column
annotation_df <- annotation_df %>% select(-EH_ID, )
pheatmap(heatmap_data2, annotation_col = annotation_df, scale = "row")
pheatmap(heatmap_data, annotation_col = annotation_df, scale = "row")
View(heatmap_data)
library(pheatmap)
library(tidyverse)
library(matrixStats)
library(tidyr)
library(janitor)
library(tibble)
### Import the data
Challenge <- read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data_products/Challenge_infections.csv")
#cor(Challenge[, grepl("_N", colnames(Challenge))], use="pairwise.complete.obs")
basics_gene <- as_tibble(Challenge) %>%
dplyr::filter(infection == "challenge", dpi == "8") %>%
dplyr::group_by(EH_ID, infection) %>%
dplyr::select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL", ends_with("_N")))
# remove duplicated and change the format to data frame
basics_gene <- unique(basics_gene) %>% as.data.frame(basics_gene)
gene <- basics_gene %>% select(-infection) %>% dplyr::select(c(EH_ID, ends_with("_N")))
# turn the data frame into a matrix and transpose it. We want to have each cell
# type as a row name
gene <- t(as.matrix(gene))
#switch the matrix back to a data frame format
gene <- as.data.frame(gene)
# turn the first row into column names
gene %>%
row_to_names(row_number = 1) -> gene
# Now further prepare the data frame for plotting by removing the first row
## and convert the column to row names with the cells
gene[-1, ] -> heatmap_data
table(rowSums(is.na(heatmap_data)) == nrow(heatmap_data))
rm(gene)
# How do our data look like?
glimpse(heatmap_data) #alll columns appear to be numeric
# turn the columns to numeric other wise the heatmap function will not work
heatmap_data[] <- lapply(heatmap_data, function(x) as.numeric(as.character(x)))
# How do our data look like?
glimpse(heatmap_data) #alll columns appear to be numeric
# remove columns with only NAs
heatmap_data <- Filter(function(x)!all(is.na(x)), heatmap_data)
# How do our data look like?
glimpse(heatmap_data) #alll columns appear to be numeric
#remove rows with only Nas
heatmap_data <- heatmap_data %>% summarise_each(funs(sum(is.na(.))))
#remove rows with only Nas
heatmap_data <-  heatmap_data[, colSums(is.na(heatmap_data)) != nrow(heatmap_data)]
basics_gene <- as_tibble(Challenge) %>%
dplyr::filter(infection == "challenge", dpi == "8") %>%
dplyr::group_by(EH_ID, infection) %>%
dplyr::select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL", ends_with("_N")))
# remove duplicated and change the format to data frame
basics_gene <- unique(basics_gene) %>% as.data.frame(basics_gene)
gene <- basics_gene %>% select(-infection) %>% dplyr::select(c(EH_ID, ends_with("_N")))
# turn the data frame into a matrix and transpose it. We want to have each cell
# type as a row name
gene <- t(as.matrix(gene))
#switch the matrix back to a data frame format
gene <- as.data.frame(gene)
# turn the first row into column names
gene %>%
row_to_names(row_number = 1) -> gene
# Now further prepare the data frame for plotting by removing the first row
## and convert the column to row names with the cells
gene[-1, ] -> heatmap_data
table(rowSums(is.na(heatmap_data)) == nrow(heatmap_data))
rm(gene)
# How do our data look like?
glimpse(heatmap_data) #alll columns appear to be numeric
# turn the columns to numeric other wise the heatmap function will not work
heatmap_data[] <- lapply(heatmap_data, function(x) as.numeric(as.character(x)))
# remove columns with only NAs
heatmap_data <- Filter(function(x)!all(is.na(x)), heatmap_data)
#remove rows with only Nas
heatmap_data2 <-  heatmap_data[, colSums(is.na(heatmap_data)) != nrow(heatmap_data)]
#remove rows with only Nas
heatmap_data <-  heatmap_data[, colSums(is.na(heatmap_data)) != nrow(heatmap_data)]
### Prepare the annotation data frame for the heatmap
annotation_df <- basics_gene %>%
select(c("EH_ID", "primary_infection", "challenge_infection", "infection_history",
"mouse_strain", "max_WL"))
annotation_df <- as.data.frame(annotation_df)
### Prepare the annotation columns for the heatmap
rownames(annotation_df) <- annotation_df$EH_ID
# Match the row names to the heatmap data frame
rownames(annotation_df) <- colnames(gene)
#remove the unecessary column
annotation_df <- annotation_df %>% select(-EH_ID, )
pheatmap(heatmap_data, annotation_col = annotation_df, scale = "row")
#plot the heatmap
jpeg("output_data/Pheatmap_gene_lab.jpg", width = 1600, height = 1200)
pheatmap(heatmap_data, annotation_col = annotation_df, scale = "row")
#close the jpeg file
dev.off()
#plot the heatmap
jpeg("output_data/Pheatmap_gene_lab.jpg", width = 1400, height = 1000)
pheatmap(heatmap_data, annotation_col = annotation_df, scale = "row")
#close the jpeg file
dev.off()
#close the jpeg file
dev.off()
#test 4
#%>%
filter(if_any(everything(), ~ !is.na(.)))
#plot the heatmap
jpeg("output_data/Pheatmap_gene_lab.jpg", width = 1400, height = 1000)
pheatmap(heatmap_data, annotation_col = annotation_df, scale = "row")
#close the jpeg file
dev.off()
# draw correlation between the genes
cor(Challenge[, grepl("_N", colnames(Challenge))], use="pairwise.complete.obs")
# draw correlation between the genes
cor(Challenge[, grepl("_N", colnames(Challenge))], use="pairwise.complete.obs")
# draw correlation between the genes
cor(Challenge[, grepl("_N", colnames(Challenge))], use="pairwise.complete.obs")
library(corrplot)
install.packages("corrplot")
library(tibble)
library(corrplot)
corrplot(Challenge[, grepl("_N", colnames(Challenge))], use="pairwise.complete.obs", method="color")
# draw correlation between the genes
cor(Challenge[, grepl("_N", colnames(Challenge))], use="pairwise.complete.obs")
# draw correlation between the genes
gene_correlation <- as.matrix(cor(Challenge[, grepl("_N", colnames(Challenge))], use="pairwise.complete.obs"))
View(gene_correlation)
corrplot(gene_correlation, method="color")
corrplot(gene_correlation, method="color", tl.col="black", tl.srt=45)
