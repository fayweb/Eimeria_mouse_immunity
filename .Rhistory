knitr::include_graphics("~/GitHub/Statistic_Biowissenschaften_I/Images/03_11_2022/4.png", error = FALSE)
knitr::include_graphics("~/GitHub/Statistic_Biowissenschaften_I/Images/03_11_2022/5.png", error = FALSE)
Sens <- 0.8
pos_pred <- function(prev) {
Sens <- 0.8
Spez <- 0.7
(Sens * Prev) / ((Sens * prev) + (1 - Spez) * (1 - prev))
}
(Spez * (1 - prev)) / (Spez * (1 - prev) + (1 - Sens) * prev)
# Testem f+r positive prädiktive wert
pos_pred <- function(prev) {
Sens <- 0.8
Spez <- 0.7
(Sens * Prev) / ((Sens * prev) + (1 - Spez) * (1 - prev))
}
neg_pred <- function(prev) {
Sens <- 0.8
Spez <- 0.7
(Spez * (1 - prev)) / (Spez * (1 - prev) + (1 - Sens) * prev)
}
prev(10)
pos_pred(0.1)
# Testem f+r positive prädiktive wert
pos_pred <- function(x) {
Sens <- 0.8
Spez <- 0.7
(Sens * Prev) / ((Sens * x) + (1 - Spez) * (1 - x))
}
neg_pred <- function(x) {
Sens <- 0.8
Spez <- 0.7
(Spez * (1 - x)) / (Spez * (1 - x) + (1 - Sens) * x)
}
pos_pred(0.1)
# Testem f+r positive prädiktive wert
pos_pred <- function(x) {
Sens <- 0.8
Spez <- 0.7
(Sens * x) / ((Sens * x) + (1 - Spez) * (1 - x))
}
neg_pred <- function(x) {
Sens <- 0.8
Spez <- 0.7
(Spez * (1 - x)) / (Spez * (1 - x) + (1 - Sens) * x)
}
pos_pred(0.1)
# Testem f+r positive prädiktive wert
pos_pred <- function(x) {
Sens <- 0.8
Spez <- 0.7
paste0(" Das positive prädictive Wert für eine prävalenz von ", x, " ist: ",
(Sens * x) / ((Sens * x) + (1 - Spez) * (1 - x)))
}
pos_pred(0.1)
# Testem f+r positive prädiktive wert
pos_pred <- function(x) {
Sens <- 0.8
Spez <- 0.7
y <-    (Sens * x) / ((Sens * x) + (1 - Spez) * (1 - x))
paste0(" Das positive prädictive Wert für eine prävalenz von ", x, " ist: ",
y)
}
neg_pred <- function(x) {
Sens <- 0.8
Spez <- 0.7
(Spez * (1 - x)) / (Spez * (1 - x) + (1 - Sens) * x)
}
pos_pred(0.1)
# Testem f+r positive prädiktive wert
pos_pred <- function(x) {
Sens <- 0.8
Spez <- 0.7
y <-    (Sens * x) / ((Sens * x) + (1 - Spez) * (1 - x))
paste0(" Das positive prädictive Wert für eine prävalenz von ", x, " ist: ",
y)
}
pos_pred(0.1)
paste0(" Das positive prädictive Wert für eine prävalenz von ", x, " ist: ",
round(y, digits = 4)
}
}
pos_pred(0.1)
}
# Testem f+r positive prädiktive wert
pos_pred <- function(x) {
Sens <- 0.8
Spez <- 0.7
y <-    (Sens * x) / ((Sens * x) + (1 - Spez) * (1 - x))
paste0(" Das positive prädictive Wert für eine prävalenz von ", x, " ist: ",
round(y, digits = 4))
}
pos_pred(0.1)
neg_pred <- function(x) {
Sens <- 0.8
Spez <- 0.7
y <- (Spez * (1 - x)) / (Spez * (1 - x) + (1 - Sens) * x)
paste0(" Das negative prädictive Wert für eine prävalenz von ", x, " ist: ",
round(y, digits = 4))
}
# make a vector out of the prevaleces
Prevalence <- c(0.1, 0.05, 0.01, 0.001)
knitr::opts_chunk$set(echo = TRUE)
# Positive prädiktive
lapply(Prevalence, pos_pred)
# Testem f+r positive prädiktive wert
pos_pred <- function(x) {
Sens <- 0.8
Spez <- 0.7
y <-    (Sens * x) / ((Sens * x) + (1 - Spez) * (1 - x))
paste0(" Das positive prädictive Wert für eine prävalenz von ", x, " ist: ",
round(y, digits = 4))
}
neg_pred <- function(x) {
Sens <- 0.8
Spez <- 0.7
y <- (Spez * (1 - x)) / (Spez * (1 - x) + (1 - Sens) * x)
paste0(" Das negative prädictive Wert für eine prävalenz von ", x, " ist: ",
round(y, digits = 4))
}
# make a vector out of the prevaleces
Prevalence <- c(0.1, 0.05, 0.01, 0.001)
# Positive prädiktive
lapply(Prevalence, pos_pred)
# negative prädiktive
lapply(Prevalence, neg_pred)
# Positive prädiktive
lapply(Prevalence, pos_pred)
# negative prädiktive
lapply(Prevalence, neg_pred)
# Positive prädiktive
lapply(Prevalence, pos_pred)
# negative prädiktive
lapply(Prevalence, neg_pred)
y <-    (Sens * x) / ((Sens * x) + (1 - Spez) * (1 - x))
y <-  (0.8 * x) / ((0.8) + (1 - 0.9) * (1 - x))
x[1:100]
x <- [1:100]
x <- 1:100
y <-  (0.8 * x) / ((0.8) + (1 - 0.9) * (1 - x))
y
plot(x, y)
library(ggplot2)
ggplot(x, y)
ggplot(aes(x, y)
ggplot(aes(x, y))
ggplot(x, aes(x, y))
plot(x ~ y)
md1 <- lm(y ~x)
abline(md1)
View(md1)
df <- data.frame(x = c(1::100))
df <- data.frame(x = c(1:100))
df$y <-  (0.8 * x) / ((0.8) + (1 - 0.9) * (1 - x))
library(ggpmisc)
install.packages("ggpmisc")
library(ggpmisc)
library(ggpmisc)
df <- data.frame(x = c(1:100))
df <- data.frame(x = c(1:100))
df$y <-  (0.8 * x) / ((0.8) + (1 - 0.9) * (1 - x))
ggplot(data = df, aes(x = x, y = y)) +
stat_poly_line() +
stat_poly_eq() +
geom_point()
ggplot(data = df, aes(x = x, y = y)) +
stat_poly_line() +
stat_poly_eq() +
geom_point() +
scale_x_log10()
df$y <-  (0.8 * x) / ((0.8) + (1 - 0.99) * (1 - x))
ggplot(data = df, aes(x = x, y = y)) +
stat_poly_line() +
stat_poly_eq() +
geom_point() +
scale_x_log10()
df$y <-  (0.99 * x) / ((0.99) + (1 - 0.8) * (1 - x))
ggplot(data = df, aes(x = x, y = y)) +
stat_poly_line() +
stat_poly_eq() +
geom_point() +
scale_x_log10()
library(ggplot2)
library(ggpmisc)
df <- data.frame(x = c(1:100))
# A
df$A <-  (0.8 * x) / ((0.8) + (1 - 0.9) * (1 - x))
ggplot(data = df, aes(x = x, y = A)) +
stat_poly_line() +
stat_poly_eq() +
geom_point() +
scale_x_log10()
#B
df$B <-  (0.8 * x) / ((0.8) + (1 - 0.99) * (1 - x))
ggplot(data = df, aes(x = x, y = B)) +
stat_poly_line() +
stat_poly_eq() +
geom_point() +
scale_x_log10()
# C
df$C <-  (0.99 * x) / ((0.99) + (1 - 0.8) * (1 - x))
ggplot(data = df, aes(x = x, y = C)) +
stat_poly_line() +
stat_poly_eq() +
geom_point() +
scale_x_log10()
ggplot(data = df, aes(x = x, y = A, color =  "blueviolet")) +
stat_poly_line() +
stat_poly_eq() +
geom_point() +
scale_x_log10()
ggplot(data = df, aes(x = x, y = A)) +
stat_poly_line() +
stat_poly_eq() +
geom_point(color =  "blueviolet") +
scale_x_log10()
ggplot(data = df, aes(x = x, y = C)) +
stat_poly_line() +
stat_poly_eq() +
geom_point(color =  "goldenrod") +
scale_x_log10()
ggplot(data = df, aes(x = x, y = C, color =  "goldenrod")) +
stat_poly_line() +
stat_poly_eq() +
geom_point() +
scale_x_log10()
View(df)
ggplot(data = df, aes(x = x, y = A)) +
geom_quantile()
plot(y ~ x)
# A
A <-  (0.8 * x) / ((0.8) + (1 - 0.9) * (1 - x))
x <- 1:100
# A
A <-  (0.8 * x) / ((0.8) + (1 - 0.9) * (1 - x))
plot(x ~ x)
plot(x ~ y)
plot(y ~ x)
ggplot(data = df, aes(x = x, y = A)) +
stat_poly_line() +
stat_poly_eq() +
geom_point(color =  "blueviolet") +
scale_x_log10()
plot(y ~ x)
?plot
plot(y ~ x)
plot(A ~ x)
#(Sens * x) / ((Sens * x) + (1 - Spez) * (1 - x))
x <- 1:100
# B
B <-  (0.8 * x) / ((0.8) + (1 - 0.99) * (1 - x))
plot(B ~ x)
# A
A <-  (0.8 * x) / ((0.8 * x) + (1 - 0.9) * (1 - x))
plot(A ~ x)
# B
B <-  (0.8 * x) / ((0.8 * x) + (1 - 0.99) * (1 - x))
plot(B ~ x)
# B
C <-  (0.99 * x) / ((0.8 * x) + (1 - 0.99) * (1 - x))
plot(C ~ x)
plot(A ~ x, C ~ x)
df <- data.frame(x = c(1:100))
df$A <-  (0.8 * x) / ((0.8 * x) + (1 - 0.9) * (1 - x))
ggplot(df, aes(x = x, y = A)) +
geom_line(aes(y = y, colour = "y")) +
geom_line(aes(y = z, colour = "z"))
ggplot(df, aes(x = x) +
geom_line(aes(y = z, colour = "z"))
geom_line(aes(y = z, colour = "z"))
geom_line(aes(y = y, colour = "y"))
geom_line(aes(y = y, colour = "A"))
ggplot(df, aes(x = x, y = A) +
geom_line()
ggplot(df, aes(x = x, y = A)) +
ggplot(df, aes(x = x, y = A)) +
geom_line()
ggplot(df) +
ggplot(df) +
geom_line(aes(x = x, y = A))
ggplot(df, aes(x = x)) +
geom_line(aes(y = A))
ggplot(df, aes(x = x)) +
geom_line(aes(y = A, color = "blueviolet"))
ggplot(df, aes(x = x)) +
geom_line(aes(y = A, color = A))
ggplot(df, aes(x = x)) +
geom_line(aes(y = A, color = A, alpha = 1))
ggplot(df, aes(x = x)) +
geom_line(aes(y = A, color = A, alpha = 100))
ggplot(df, aes(x = x)) +
geom_line(aes(y = A, color = A, alpha = 0.9))
ggplot(df, aes(x = x)) +
geom_line(aes(y = A, color = A, linetype = 1))
ggplot(df, aes(x = x)) +
geom_line(aes(y = A, linetype = 1))
ggplot(df, aes(x = x)) +
geom_line(y = A, linetype = 1)
ggplot(df, aes(x = x)) +
geom_line(aes(y = A, linetype = 1))
geom_line(aes(y = A)
ggplot(df, aes(x = x)) +
View(df)
ggplot(df, aes(x = x)) +
geom_line(aes(A))
ggplot(df, aes(x = x, y = A)) +
geom_line(aes(A))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A))
geom_line(aes(x = x, y = A, color = "y")
geom_line(aes(x = x, y = A, color = "blueviolet")
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "blueviolet"))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "blue"))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "A"))
df$B <-  (0.8 * x) / ((0.8 * x) + (1 - 0.99) * (1 - x))
df$C <-  (0.99 * x) / ((0.8 * x) + (1 - 0.99) * (1 - x))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "A")) +
geom_line(aes(x = x, y = B, color = "B")) +
geom_line(aes(x = x, y = C, color = "C"))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "A", linetype = 1)) +
geom_line(aes(x = x, y = B, color = "B")) +
geom_line(aes(x = x, y = C, color = "C"))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "A", size = 10)) +
geom_line(aes(x = x, y = B, color = "B")) +
geom_line(aes(x = x, y = C, color = "C"))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "A", size =5)) +
geom_line(aes(x = x, y = B, color = "B")) +
geom_line(aes(x = x, y = C, color = "C"))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "A", size =3)) +
geom_line(aes(x = x, y = B, color = "B")) +
geom_line(aes(x = x, y = C, color = "C"))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "A", size =2)) +
geom_line(aes(x = x, y = B, color = "B")) +
geom_line(aes(x = x, y = C, color = "C"))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "A", size =2)) +
geom_line(aes(x = x, y = B, color = "B",  size =2)) +
geom_line(aes(x = x, y = C, color = "C",  size =2))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "A", size =1)) +
geom_line(aes(x = x, y = B, color = "B",  size =2)) +
geom_line(aes(x = x, y = C, color = "C",  size =2))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "A", size =1)) +
geom_line(aes(x = x, y = B, color = "B",  size =1)) +
geom_line(aes(x = x, y = C, color = "C",  size =1))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "A")) +
geom_line(aes(x = x, y = B, color = "B",  size =1)) +
geom_line(aes(x = x, y = C, color = "C",  size =1))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "A", size = 0.3)) +
geom_line(aes(x = x, y = B, color = "B",  size = 0.3)) +
geom_line(aes(x = x, y = C, color = "C",  size = 0.3))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "A", size = 0.1)) +
geom_line(aes(x = x, y = B, color = "B",  size = 0.3)) +
geom_line(aes(x = x, y = C, color = "C",  size = 0.3))
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "A", size = 0.1)) +
geom_line(aes(x = x, y = B, color = "B",  size = 0.1)) +
geom_line(aes(x = x, y = C, color = "C",  size = 0.1))
geom_line(aes(x = x, y = C, color = "C")
ggplot(df, aes(x = x)) +
ggplot(df, aes(x = x)) +
geom_line(aes(x = x, y = A, color = "A")) +
geom_line(aes(x = x, y = B, color = "B"))+
geom_line(aes(x = x, y = C, color = "C"))
library(dplyr)
library(ggplot2)
library(tidyr)
View(df)
df <- df %>%
pivot_longer(names_to = "Y", values_to = "values")
df <- df %>%
pivot_longer(cols = 2:4, names_to = "Y", values_to = "values")
ggplot(df, aes(x = x, y = values)) +
geom_line(aes(color = y))
ggplot(df, aes(x = x, y = values, color = y)) +
geom_line()
knitr::opts_chunk$set(echo = TRUE)
(2^1)^6
x <- 49 * 48 * 47 * 46 * 45 * 44
x
y <- 6*5*4*3*2*1
y
factorial(6)
x/ y
(x * factorial(43)) / (y * factorial(43))
factorial(49) / (factorial(6) * factorial(43))
choose(49,6)
1/choose(49,6)
knitr::include_graphics("~/GitHub/Statistic_Biowissenschaften_I/Images/03_11_2022/1.png", error = FALSE)
knitr::opts_chunk$set(echo = TRUE)
(2^1)^6
x <- 49 * 48 * 47 * 46 * 45 * 44
x
y <- 6*5*4*3*2*1
y
factorial(6)
x/ y
(x * factorial(43)) / (y * factorial(43))
factorial(49) / (factorial(6) * factorial(43))
choose(49,6)
1/choose(49,6)
knitr::include_graphics("~/GitHub/Statistic_Biowissenschaften_I/Images/03_11_2022/1.png", error = FALSE)
```{r}
df <- data.frame(x = c(1:100))
x <- 1:100
df$A <- (0.8 * x) / ((0.8 * x) + (1 - 0.9) * (1 - x))
df$B <-  (0.8 * x) / ((0.8 * x) + (1 - 0.99) * (1 - x))
df$C <-  (0.99 * x) / ((0.8 * x) + (1 - 0.99) * (1 - x))
#A
ggplot(df, aes(x = x, y = A)) +
geom_line(color = "blueviolet", linetype = 1) +
scale_y_log10() +
labs(y = "Positive prädiktive Wert", x = "Prävalenz",
title ="Positive prädiktive Wert ~ Prävalenz",
subtitle = "Sensitivität 80% und Spezifität 90")
#B
ggplot(df, aes(x = x, y = B)) +
geom_line(color = "green", linetype = 2) +
scale_y_log10() +
labs(y = "Positive prädiktive Wert", x = "Prävalenz",
title ="Positive prädiktive Wert ~ Prävalenz",
subtitle = "Sensitivität 80% und Spezifität 99")
```{r}
knitr::opts_chunk$set(echo = TRUE)
(2^1)^6
x <- 49 * 48 * 47 * 46 * 45 * 44
x
y <- 6*5*4*3*2*1
y
factorial(6)
x/ y
(x * factorial(43)) / (y * factorial(43))
factorial(49) / (factorial(6) * factorial(43))
choose(49,6)
1/choose(49,6)
```{r}
```{r}
m <- function(A, B) {A*B}
#A - F
m(P_A, P_F)
setwd("GitHub/Eimeria_mouse_immunity/")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("optimx", version = "2021-10.12") # this package is required for
#the parasite load package to work
library(tidyverse)
library(tidyr)
library(dplyr)
library(cowplot)
library(randomForest)
library(ggplot2)
library(VIM) # visualizing missing data
library(mice) # imputing missing data without predictors
library(ggpubr)
library(optimx)
library(rfUtilities) # Implements a permutation test cross-validation for
# Random Forests models
library(mice) #imputations
library(fitdistrplus) #testing distributions
library(logspline)
library(caret)
hm <- read.csv("output_data/2.imputed_MICE_data_set.csv")
Field <- hm %>%
filter(origin == "Field") %>%
drop_na(HI)
EqPCR.cols      <- c("delta_ct_cewe_MminusE", "MC.Eimeria", "Ct.Eimeria") #,"Ct.Mus""delta_ct_ilwe_MminusE", )
Genes_wild   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #, "IL.12", "IRG6")
#select the imputed gene columns
gene <-  Field %>%
dplyr::select(c(Mouse_ID, "IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
genes <- gene %>%
dplyr::select(-Mouse_ID)
#remove rows with only nas
genes <- genes[,colSums(is.na(genes))<nrow(genes)]
#remove colums with only nas
genes <- genes[rowSums(is.na(genes)) != ncol(genes), ]
# select the same rows from the gene data
gene <- gene[row.names(genes),]
# select the same rows from the field data
Field <- Field[row.names(genes),]
# load predicting weight loss model
weight_loss_predict <- readRDS("r_scripts/models/predict_WL.rds")
set.seed(540)
#The predict() function in R is used to predict the values based on the input data.
predictions_field <- predict(weight_loss_predict, genes)
#make the vector positive so that the distributions further down work
predictions_field <- predictions_field * (-1)
# assign test.data to a new object, so that we can make changes
result_field <- genes
#add the new variable of predictions to the result object
result_field <- cbind(result_field, predictions_field)
# add it to the field data
Field <- cbind(Field, predictions_field)
require(devtools)
devtools::install_github("alicebalard/parasiteLoad@v2.0", force = TRUE)
