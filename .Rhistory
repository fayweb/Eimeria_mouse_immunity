Data <- rename(Data, Aspiculuris_sp = ASP, Syphacia_sp = SYP, Mastophorus_muris = MM,
Trichuris_muris = TM)
write.csv(Data, "data_input/FU_Immune_Worms.csv", row.names = FALSE)
#cell count columns from SOTA from MLN
CellCount.cols <- c("CD8", "Treg", "CD4", "Treg17", "Th1", "Th17",
"Act_CD8", "IFNy_CD4", "IL17A_CD4", "IFNy_CD8")
#select only mouse id from Data
Data_Mouse_id <- Data %>%
select(Mouse_ID)
#extract our immune data from sota
SOTA_Immune <- SOTA %>%
select(Mouse_ID, all_of(CellCount.cols)) %>%
right_join(Data_Mouse_id, by = "Mouse_ID")
SOTA_Immune <- SOTA_Immune %>%
rename(CD4_mLN = CD4, CD8_mLN = CD8, Foxp3_in_CD4_Treg_mLN = Treg,
CD4_mLN = CD4, Tbet_in_CD4_Foxp3_Th1_mLN = Th1)
cor(SOTA_Immune, Data, use = "pairwise.complete.obs")
Data_selection <- Data %>%
select(Mouse_ID, CD4_mLN, CD8_mLN, Foxp3_in_CD4_Treg_mLN, )
#comparing Treg counts from spleen
Treg_Sota <- SOTA %>%
select(Mouse_ID, Treg)
Treg_FU <- Data %>%
select(Mouse_ID, Foxp3..in.CD4...Treg..mLN) %>%
left_join(Treg_Sota, by = "Mouse_ID")
#see if there are any correlations between our data and fu data
cor(Treg_FU$Treg, Treg_FU$Foxp3..in.CD4...Treg..mLN, use = "pairwise.complete.obs")
CD8_Sota <- SOTA %>%
select(Mouse_ID, CD8)
CD8_FU <- Data %>%
select(Mouse_ID, CD8..mLN) %>%
left_join(CD8_Sota, by = "Mouse_ID")
CD8_FU <- CD8_FU[complete.cases(CD8_FU), ]
CD8_FU <- CD8_FU %>%
mutate(CD8..mLN = as.numeric(CD8..mLN))
cor(CD8_FU$CD8, CD8_FU$CD8..mLN, use = "pairwise.complete.obs")
CD4_Sota <- SOTA %>%
select(Mouse_ID, CD4)
CD4_FU <- Data %>%
select(Mouse_ID, CD4..mLN) %>%
left_join(CD4_Sota, by = "Mouse_ID")
CD4_FU <- CD4_FU[complete.cases(CD4_FU), ]
CD4_FU <- CD4_FU %>%
mutate(CD4..mLN = as.numeric(CD4..mLN))
cor(CD4_FU$CD4, CD4_FU$CD4..mLN, use = "pairwise.complete.obs")
source('~/GitHub/Eimeria-PhD-Project/field_mouse_eimeria/Wild_mice_immuno_Fu.R')
#removing empty columns
Data <- remove_empty(Data, which = c("cols"), quiet = TRUE)
#changing column names of worms to reflect SOTA
Data <- rename(Data, Aspiculuris_sp = ASP, Syphacia_sp = SYP, Mastophorus_muris = MM,
Trichuris_muris = TM)
write.csv(Data, "data_input/FU_Immune_Worms.csv", row.names = FALSE)
#cell count columns from SOTA from MLN
CellCount.cols <- c("CD8", "Treg", "CD4", "Treg17", "Th1", "Th17",
"Act_CD8", "IFNy_CD4", "IL17A_CD4", "IFNy_CD8")
#select only mouse id from Data
Data_Mouse_id <- Data %>%
select(Mouse_ID)
#extract our immune data from sota
SOTA_Immune <- SOTA %>%
select(Mouse_ID, all_of(CellCount.cols)) %>%
right_join(Data_Mouse_id, by = "Mouse_ID")
SOTA_Immune <- SOTA_Immune %>%
rename(CD4_mLN = CD4, CD8_mLN = CD8, Foxp3_in_CD4_Treg_mLN = Treg,
CD4_mLN = CD4, Tbet_in_CD4_Foxp3_Th1_mLN = Th1)
cor(SOTA_Immune, Data, use = "pairwise.complete.obs")
Data_selection <- Data %>%
select(Mouse_ID, CD4_mLN, CD8_mLN, Foxp3_in_CD4_Treg_mLN, )
#comparing Treg counts from spleen
Treg_Sota <- SOTA %>%
select(Mouse_ID, Treg)
Treg_FU <- Data %>%
select(Mouse_ID, Foxp3..in.CD4...Treg..mLN) %>%
left_join(Treg_Sota, by = "Mouse_ID")
#see if there are any correlations between our data and fu data
cor(Treg_FU$Treg, Treg_FU$Foxp3..in.CD4...Treg..mLN, use = "pairwise.complete.obs")
#comparing Treg counts from spleen
Treg_Sota <- SOTA %>%
select(Mouse_ID, Treg)
Treg_FU <- Data %>%
select(Mouse_ID, Foxp3..in.CD4...Treg..mLN) %>%
left_join(Treg_Sota, by = "Mouse_ID")
#see if there are any correlations between our data and fu data
cor(Treg_FU$Treg, Treg_FU$Foxp3..in.CD4...Treg..mLN, use = "pairwise.complete.obs")
#extract our immune data from sota
SOTA_Immune <- SOTA %>%
select(Mouse_ID, all_of(CellCount.cols)) %>%
right_join(Data_Mouse_id, by = "Mouse_ID")
SOTA_Immune <- SOTA_Immune %>%
rename(CD4_mLN = CD4, CD8_mLN = CD8, Foxp3_in_CD4_Treg_mLN = Treg,
CD4_mLN = CD4, Tbet_in_CD4_Foxp3_Th1_mLN = Th1)
cor(SOTA_Immune, Data, use = "pairwise.complete.obs")
Data_selection <- Data %>%
select(Mouse_ID, CD4_mLN, CD8_mLN, Foxp3_in_CD4_Treg_mLN, )
#comparing Treg counts from spleen
Treg_Sota <- SOTA %>%
select(Mouse_ID, Treg)
Treg_FU <- Data %>%
select(Mouse_ID, Foxp3..in.CD4...Treg..mLN) %>%
left_join(Treg_Sota, by = "Mouse_ID")
install.packages("tidyverse")
install.packages("ggrepel")
install.packages("gplot")
install.packages("ggplot2")
install.packages("cowplot")
install.packages("lme4")
install.packages("nlme")
install.packages("gapminder")
install.packages("devtools")
install.packages("roxygen2")
install.packages("hrbrthemes")
install.packages("esquisse")
devtools::install_github("hrbrmstr/hrbrthemes")
library(ggplot2)
library(colorDF)
library(tidyverse)
install.packages("colorDF")
library(ggplot2)
library(colorDF)
library(tidyverse)
library(ggplot2)
library(ggplot2)
library(colorDF)
library(tidyverse)
g1 <- ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length)) + geom_point()
g1
as.formula("~ a")
lm_wrapper <- function(data, x_name, y_name) {
formula <- paste(y_name, "~", x_name)
message("Using formula:", formula)
lm(as.formula(formula), data=data)
}
data <- data.frame(x=rnorm(100))
data$y <- rnorm(100) + data$x
plot(data$x, data$y)
lm(y ~ x, data=data)
lm_wrapper(data, "x", "y")
# Create an alternative "summary" function for a data frame,
#such that if I type "summary(mtcars)" I will see the result of that function.
summary(mtcars)
summary.data.frame(mtcars)
summary(mtcars)
summary(mtcars)
summary.data.frame <- function(X) {
print("Blop!")
}
summary(mtcars)
#Create a new class: sets
#Create a function called set which turns a vector (character or otherwise)
#o a set, just by adding the class set. (look at the example from the lecture)
set <- function(x) {
if(!is(x, "set")) {
class(x) <- c("set", class(x))
}
x
}
set(1:100)
set(set(1:10))
print(unclass(x))
print.set <- function(x) {
print(unclass(x))
}
print(1:100)
print("hello")
summary.set <- function(x) {
print("hello")
}
summary(set(1:100))
`+.set` <- function(x, y) { set(union(x, y)) }
ls
?set
??set
![Protocol page 1](Protocol_dna_extraction-1)
![Protocol page 2](Protocol_dna_extraction-2)
![Protocol page 2]('Protocol_dna_extraction-2')
### This could be an example of how to access particular subsets of
### the data
library(dplyr)
library(magrittr)
library(stringr)
library(ggplot2)
library(tidyr)
library(plyr)
library(data.table)
library(psych)
#select columns:
basics <- c("EH_ID", "mouse_strain", "experiment", "primary_infection",
"challenge_infection", "labels", "dpi", "infection", "infection_history", "sex", "death")
weight_loss <- c("weight", "weight_dpi0", "relative_weight")
oocysts_counts <- c("feces_weight", "oocyst_sq1", "oocyst_sq2", "oocyst_sq3",
"oocyst_sq4", "dilution", "OOC", "OO4sq", "OPG_O")
intensity_qPCR <- c("Eim_MC", "delta")
cewe_elisa <- "IFNy_CEWE"
mes_elisa <- "IFNy_MES"
gene_expr <- c("CXCR3", "IRG6", "IL.12")
CellCount.cols <- c("Position", "CD4", "Treg", "Div_Treg", "Treg17", "Th1", "Div_Th1", "Th17",
"Div_Th17", "CD8", "Act_CD8", "Div_Act_CD8", "IFNy_CD4", "IFNy_CD8",
"Treg_prop", "IL17A_CD4", "batch")
IFNy_faeces <- c("IFNy_FEC", "Caecum")
Gene.Exp.cols   <- c("IFNy", "IL.12", "IRG6", "CXCR3", "IL.6", "GBP2",
"IL.10", "IL.13", "IL.10", "IL.13", "IL1RN",
"CXCR3", "CASP1", "CXCL9",
"IDO1", "IRGM1", "MPO", "MUC2", "MUC5AC", "MYD88",
"NCR1", "PRF1", "RETNLB", "SOCS1", "TICAM1", "TNF")
#reading the overview table. In each row there is a link to the raw data for each experiment
OV <- read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/Eimeria_Lab_overview.csv")
## ## Only the challenge experiments
#a list of the names of each experiments
# you can use it later, to select the experiments from ov
ChallengeEx  <- c("E57", "E10", "E11", "P4", "P3")
## ## download and append the weigth tables
#lapply: applies a function to every element of the list
#we select the challenge experimetns and the weight columns
#we apply to every element of the list the function read.csv
W <- lapply(OV[OV$Experiment%in%ChallengeEx, "weight"], read.csv)
#reduce: works on 1st and 2nd element, produces result and then uses the result
#with the 3rd element and so on
#we apply in this case the function rbind
Weight <- Reduce(rbind, W)
rm(W)
## ## Same for shedding
O <- lapply(OV[OV$Experiment%in%ChallengeEx, "shedding"], read.csv)
Oocysts <- Reduce(rbind, O)
rm(O)
## ## some don't agree
table(Oocysts$labels%in%Weight$labels)
table(Weight$labels%in%Oocysts$labels)
## there are more in in the weights table which are not found in the
## oocysts though
Weight[!Weight$labels%in%Oocysts$labels, ]
## But if the weight is NA the mouse was dead
table(Weight[!Weight$labels%in%Oocysts$labels &
is.na(Weight$weight), "dpi"])
### confirmed by the late dpi of these!
Results <- merge(Weight, Oocysts, all=TRUE)
## IDs sometimes with "_" sometimes without
Results$EH_ID <- gsub("LM_", "LM", Results$EH_ID)
## For now we hav to exclude those E11aBMI which have no mouse IDs
Results <- Results[!is.na(Results$EH_ID), ]
## Same for design
D <- lapply(OV[OV$Experiment%in%ChallengeEx, "design"], read.csv)
Des.cols <- Reduce(intersect, lapply(D, colnames))
Design <- Reduce(rbind, lapply(D, "[", Des.cols))
rm(D)
## remove all whitespaces
Design %>%
mutate(across(where(is.character), str_trim)) ->
Design
## IDs sometimes with "_" sometimes without
Design$EH_ID <- gsub("LM_", "LM", Design$EH_ID)
#### NOW ALSO REMOVE EXPERIMENT column?
### Not for now
ALL <- merge(Design, Results, all=TRUE, by="EH_ID")
table(ALL$experiment.x, ALL$experiment.y)
## let's call experiment 5 and 7 57, like in all tables
Design$experiment[Design$experiment%in%c("E5", "E7")] <- "E57"
Results$experiment[Results$experiment%in%c("E5", "E7")] <- "E57"
ALL <- merge(Design, Results, all=TRUE)
### some mice don't have an infection history
forgotten.mice <- unique(ALL[is.na(ALL$primary_infection), "EH_ID"])
## one mouse "LM0295" got lost?
Design$EH_ID[!Design$EH_ID%in%Results$EH_ID]
### Two samples with no result records
### [1] "LM0205" "LM0290"
## all the data has a mouse ID
table(is.na(ALL$EH_ID))
## but feces weights are ZERO T ( when the oocyst counts are NA ->
## the mouse was dead)!
table(ALL$feces_weight == 0)
##  only one prolbem remaining after asking Alice for better data...
ALL[which(ALL$feces_weight == 0 &
!is.na(ALL$oocyst_sq2)), ]
ALL %>% filter(!is.na(challenge_infection)) %>%
rowwise() %>%
dplyr::mutate(OO4sq = rowSums(across(starts_with("oocyst_")))) %>%
## 0.1Âµl per square -> *10.000 to scale up to ml
mutate(OOC = (OO4sq/4*10000)/dilution) %>%
## we have ZEROS in feces weight (also when we counted oocysts) so we better don't
## calculate OPG for now but just max (see below)
## mutate(OPG=OOC/feces_weight) %>%
## also re-calculate relative weight, as this seems to have errors
## from a spreadsheet program (wtf!)
mutate(relative_weight= weight/weight_dpi0*100) %>%
## also look at this for OPG above (by uncommenting)
## select(feces_weight, starts_with("oocyst_"), OO4sq, OOC) %>%
## look at this for controlling the weight calculation
## select(EH_ID, dpi, infection, weight, relative_weight) %>%
## print(n=40)
## the E88 innoculum in E57 challenge infection was "not
## working", these mice are basically unifected controls
mutate(challenge_infection=ifelse(!experiment%in%"E57",
challenge_infection,
ifelse(challenge_infection%in%"E88", "UNI",
challenge_infection))) %>%
## then correct the infection history
mutate(infection_history=paste0(primary_infection, "_",
challenge_infection)) ->
ALL
#here is a function to join the following merged data frames to ALL
join_to_ALL <- function(x) {
left_join(ALL, unique(x), by = c(intersect(colnames(x), colnames(ALL))))
}
#download and append the infection intensity tables (qPCR)
I <- lapply(OV[OV$Experiment%in%ChallengeEx, "infection_intensity"], read.csv)
#now combine the infection intensity tables
Intensity <- Reduce(rbind, I)
rm(I)
## Corrrect wrong IDs
Intensity$EH_ID <- gsub("LM_", "LM", Intensity$EH_ID)
## Melting curve sometimes positve sometimes TRUE, and the opposite
Intensity$Eim_MC <- gsub("pos", TRUE, Intensity$Eim_MC)
Intensity$Eim_MC <- gsub("neg", FALSE, Intensity$Eim_MC)
#Eim_MC type is character, change to logical
Intensity$Eim_MC <- as.logical(Intensity$Eim_MC)
ALL <- join_to_ALL(Intensity)
### Step: Join the CEWE_ELISA to our challenge infections file
## ## download and append the CEWE_ELISA tables
#lapply: applies a function to every element of the list
C <- OV[OV$Experiment %in% ChallengeEx, "CEWE_ELISA"]
#I have to apply the read.csv to vector elements which contain the raw data, therefore
#I have to first select from the OV file the lines with actual link to the raw files
C <- lapply(C[c(1,2,5)], read.csv)
CEWE_ELISA <- Reduce(rbind, C)
rm(C)
#Next step clean the Mouse ID
## IDs sometimes with "_" sometimes without
CEWE_ELISA$EH_ID <- gsub("LM_", "LM", CEWE_ELISA$EH_ID)
#Change IFNy to IFNy_cewe to show origin of the measurement
CEWE_ELISA <- CEWE_ELISA %>% dplyr::rename(IFNy_CEWE = IFNy)
#merge with ALL
ALL <- join_to_ALL(CEWE_ELISA)
##Joining data on ELISA from the mesenterial lymphnodes
#download and append the data from the ELISA's - Mesentrial Lymphnodes
#step by step, as there are empty spaces and this won't work
M <- OV[OV$Experiment%in%ChallengeEx, "MES_ELISA"]
#I have to apply the read.csv to vector elements which contain the raw data, therefore
#I have to first select from the OV file the lines with actual links to the raw files
#as there is only one row line with row data, lapply is not required here
MES_ELISA <- read.csv(M[[1]])
rm(M)
## Corrrect wrong IDs
MES_ELISA$EH_ID <- gsub("LM_", "LM", MES_ELISA$EH_ID)
#change IFNy to IFNy_cewe to show origin of the measurement
MES_ELISA <- MES_ELISA %>% dplyr::rename(IFNy_MES = IFNy)
#Now join the MES_ELISA to the ALL file
ALL <- join_to_ALL(MES_ELISA)
## Moving on to the gene expression data
#download and append the gene expression data
G <- OV[OV$Experiment%in%ChallengeEx, "gene_expression"]
G <- lapply(G[c(2,5)], read.csv)
#now combine the infection intensity tables
Gene_Expression <- Reduce(rbind, G)
rm(G)
## Corrrect wrong IDs
Gene_Expression$EH_ID <- gsub("LM_", "LM", Gene_Expression$EH_ID)
# Merge to ALL
ALL <- join_to_ALL(Gene_Expression)
#remove the duplicates from the "ALL" file
ALL <- unique(ALL)
# Add the gene expression data
## using part of Finn's code
#### 2016-2019 (Luke)
IFC1 <- read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data/Experiment_results/IFC1.csv")
IFC2 <- read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data/Experiment_results/IFC2.csv")
IFC3 <- read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data/Experiment_results/IFC3.csv")
IFC4 <- read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data/Experiment_results/IFC4.csv")
IFC5 <- read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data/Experiment_results/IFC5.csv")
IFC  <- bind_rows(IFC1, IFC2, IFC3, IFC4, IFC5)
rm(IFC1, IFC2, IFC3, IFC4, IFC5)
# filter out AA
IFC <- IFC %>% filter(str_starts(EH_ID, "LM"))
View(IFC)
table(IFC)
table(IFC$Target)
table(IFC$Target %in% "IL13")
table(IFC[IFC$Target %in% "IL13", ])
table(is.na(IFC[IFC$Target %in% "IL13", "IL13"]))
is.na(IFC[IFC$Target %in% "IL13", "IL13"])
IFC[IFC$Target %in% "IL13", "IL13"]
IFC[IFC$Target %in% "IL13", ]
IFC[IFC$Target %in% "IL13", "Value"]
table(IFC[IFC$Target %in% "IL13", "Value"])
IFC[IFC$Target %in% "IL13", ] %>% filter(Value < 999)
length(unique(IFC[IFC$Target %in% "IL13", ] %>% filter(Value < 999)))
(IFC[IFC$Target %in% "IL13" & IFC$Value < 999, "EH_ID"] )
unique((IFC[IFC$Target %in% "IL13" & IFC$Value < 999, "EH_ID"])
)
length(unique((IFC[IFC$Target %in% "IL13" & IFC$Value < 999, "EH_ID"]))
)
library(ggplot2)
library(tidyr)
library(dplyr)
source("r_scripts/gene_expression/02_gene_correlation_matrix.R")
setwd("/OneDrive/Documents/GitHub/Eimeria_mouse_immunity")
getwd()
setwd("C:/Users/fay_w/OneDrive/Documents/GitHub/Eimeria_mouse_immunity")
library(ggplot2)
library(tidyr)
library(dplyr)
source("r_scripts/gene_expression/02_gene_correlation_matrix.R")
### Remove unecssary files from the environment
rm(annotation_df, basics_gene, gene, heatmap_data)
# Primary:
Challenge %>%
filter(infection == "primary", !dpi %in% "0", death == "primary") %>%
drop_na(weight_dpi0, relative_weight) %>%
group_by("EH_ID") %>%
ggplot(aes(x = dpi, y = relative_weight, color = primary_infection)) +
geom_jitter() +
stat_smooth() +
labs(x = "Days Post Infection", y = "Relative weight to first day",
title = "Weight changes during the course of the primary infection") +
theme_bw()
Challenge %>%
filter(infection == "primary", !dpi %in% "0", death == "primary") %>%
drop_na(weight_dpi0, relative_weight) %>%
group_by("EH_ID") %>%
ggplot(aes(x = dpi, y = relative_weight, color = primary_infection)) +
geom_jitter() +
stat_smooth() +
facet_wrap(~ mouse_strain) +
labs(x = "Days Post Infection", y = "Relative weight to first day",
title = "Weight changes during the course of the primary infection") +
theme_bw()
Challenge %>%
filter(infection == "primary", !dpi %in% "0", death == "primary") %>%
drop_na(weight_dpi0, relative_weight) %>%
group_by("EH_ID") %>%
ggplot(aes(x = dpi, y = relative_weight, color = primary_infection)) +
geom_jitter() +
stat_smooth() +
facet_wrap(~ mouse_strain) +
labs(x = "Days Post Infection", y = "Relative weight to first day",
title = "Weight changes during the course of the primary infection") +
theme_bw()
# Primary:
Challenge %>%
filter(infection == "primary", !dpi %in% "0", death == "primary") %>%
drop_na(weight_dpi0, relative_weight) %>%
group_by("EH_ID") %>%
ggplot(aes(x = dpi, y = relative_weight, color = primary_infection)) +
geom_jitter() +
stat_smooth() +
labs(x = "Days Post Infection", y = "Relative weight to first day",
title = "Weight changes during the course of the primary infection") +
theme_bw()
Challenge %>%
filter(infection == "challenge", !dpi %in% "0", death == "challenge") %>%
drop_na(weight_dpi0, relative_weight) %>%
group_by("EH_ID") %>%
ggplot(aes(x = dpi, y = relative_weight, color = challenge_infection)) +
geom_jitter() +
stat_smooth() +
labs(x = "Days Post Infection", y = "Relative weight to first day",
title = "Weight changes during the course of infection") +
theme_bw()
Challenge %>%
filter(infection == "challenge", !dpi %in% "0", death == "challenge") %>%
drop_na(weight_dpi0, relative_weight) %>%
group_by("EH_ID") %>%
ggplot(aes(x = dpi, y = relative_weight, color = challenge_infection)) +
geom_jitter() +
stat_smooth() +
labs(x = "Days Post Infection", y = "Relative weight to first day",
title = "Weight changes during the course of infection") +
theme_bw()  +
facet_wrap(~ mouse_strain)
Challenge %>%
drop_na(OOC) %>%
group_by("EH_ID") %>%
filter(infection == "primary", death == "primary") %>%
ggplot(aes(x = dpi, y = OOC, color = primary_infection)) +
geom_point(position = position_jitterdodge()) +
stat_smooth() +
scale_y_log10() +
labs(x = "Days Post Infection", y = "Oocysts per gram",
title = "Oocyst shedding in primary infections during the
course of infection") +
theme_bw()
Challenge %>%
drop_na(OOC) %>%
group_by("EH_ID") %>%
filter(infection == "challenge") %>%
ggplot(aes(x = dpi, y = OOC, color = challenge_infection)) +
geom_point(position = position_jitterdodge()) +
stat_smooth() +
labs(x = "Days Post Infection", y = "Oocysts per gram",
title = "Oocyst shedding in challenge infections during the
course of infection") +
theme_bw()
# primary
Challenge %>%
drop_na(delta, max_WL) %>%
group_by("EH_ID") %>%
filter(infection == "primary", Eim_MC == "TRUE", death == "primary") %>%
ggplot(aes(x = delta, y = max_WL, color = primary_infection)) +
geom_jitter() +
labs(x = "Delta Ct, Infection intensity", y = "Maximum weight loss of each mouse",
title = "Maximum Weight loss for each mouse and infection intensity,
primary infections") +
theme_bw()
Challenge %>%
drop_na(delta, max_WL) %>%
group_by("EH_ID") %>%
filter(infection == "challenge", Eim_MC == "TRUE", death == "challenge") %>%
ggplot(aes(x = delta, y = max_WL, color = challenge_infection)) +
geom_jitter() +
labs(x = "Delta Ct, Infection intensity", y = "Maximum weight loss of each mouse",
title = "Maximum Weight loss for each mouse and infection intensity,
challenge infections") +
stat_smooth() +
theme_bw()
